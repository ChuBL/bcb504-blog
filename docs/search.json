[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "My First Blog",
    "section": "",
    "text": "ASSIGNMENT 5: Happy Hockey\n\n\nCorrections for Hockey Data Visualizations\n\n\n\n\nAssignment\n\n\nDataViz\n\n\nTables\n\n\nScatterplot\n\n\nBarplot\n\n\nPiechart\n\n\n\n\nShould I trade these draft picks for this bag of magic beans…?\n\n\n\n\n\n\nMar 7, 2023\n\n\nJiyin Zhang\n\n\n\n\n\n\n  \n\n\n\n\nAssignment 4\n\n\nMarks and Channels\n\n\n\n\nAssignment\n\n\nDataViz\n\n\n\n\nA clever description that describes the stuff\n\n\n\n\n\n\nFeb 16, 2023\n\n\nJiyin Zhang\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAssignment 3\n\n\nData Visualization\n\n\n\n\n\n\n\n\n\nFeb 14, 2023\n\n\nJiyin Zhang\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAssignment 2: Your Data Ver2.0\n\n\nDescribing the dataset\n\n\n\n\n\n\n\n\n\nFeb 7, 2023\n\n\nJiyin Zhang\n\n\n\n\n\n\n  \n\n\n\n\nPost With Code\n\n\n\n\n\n\n\nnews\n\n\ncode\n\n\nanalysis\n\n\n\n\n\n\n\n\n\n\n\nFeb 2, 2023\n\n\nHarlow Malloc\n\n\n\n\n\n\n  \n\n\n\n\nWelcome To My Blog\n\n\n\n\n\n\n\nnews\n\n\n\n\n\n\n\n\n\n\n\nJan 30, 2023\n\n\nTristan O’Malley\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAssignment 2: Your Data Ver1.0\n\n\nDescribing the dataset\n\n\n\n\n\n\n\n\n\nJan 26, 2023\n\n\nJiyin Zhang\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAssignment 2: Plain Text\n\n\nDescribing the dataset\n\n\n\n\n\n\n\n\n\nJan 26, 2023\n\n\nJiyin Zhang\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/post-with-code/index.html",
    "href": "posts/post-with-code/index.html",
    "title": "Post With Code",
    "section": "",
    "text": "This is a post with executable code.\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "posts/assignment-2-ver1/index.html",
    "href": "posts/assignment-2-ver1/index.html",
    "title": "Assignment 2: Your Data Ver1.0",
    "section": "",
    "text": "This dataset is generated based on the elements coexistence counts from Mindat.org database. The original data source is retrieved via Mindat API and stored in JSON format. Then after data pre-process and data cleaning steps, the retrieved data is cured and stored in CSV format. The dataset can be accessed at the Github repository, in the name of total_elements_mindat.csv.\n\n\n\n\n\n\nNote\n\n\n\nThe CSV file of dataset is a concatenated version of 72 separate spread sheets of element triplets coexistence values. Each spread sheet has 2 + 72 columns, the first column indicates the background element, which should remain the same throughout each separate sheet. The second column records the second dimension of the element triplets Then the third dimension of elements are listed by the remaining columns. The value of cell \\((i, j)\\) indicating the coexistence amount of three elements: the first two elements in \\((i, 0)\\) and \\((i, 1)\\), and the third element in \\((0, j)\\).\n\n\n\n\nThe dataset was retrieved via Mindat API as a JSON file. In the data preprocessing step, the elements information are extracted and statistically recorded in a new JSON file. Then I reorganized the data into 72 spread sheets as CSV formats."
  },
  {
    "objectID": "posts/assignment-2-ver1/index.html#importing-the-data",
    "href": "posts/assignment-2-ver1/index.html#importing-the-data",
    "title": "Assignment 2: Your Data Ver1.0",
    "section": "IMPORTING THE DATA",
    "text": "IMPORTING THE DATA\nI’m going to use the built-in read.csv package to import CSV file.\n\n\nCode\nlibrary(tidyverse)\n# result <- read.csv(file = 'total_elements_mindat.csv')\nresult <- read.csv(file = 'total_elements_mindat.csv')\n\n\nThe glimpse command in the Tidyverse package is a nice way to summarize the data frame:\n\n\nCode\nglimpse(result)\n\n\nRows: 5,184\nColumns: 74\n$ zaxis <chr> \"H\", \"H\", \"H\", \"H\", \"H\", \"H\", \"H\", \"H\", \"H\", \"H\", \"H\", \"H\", \"H\",…\n$ yaxis <chr> \"H\", \"Li\", \"Be\", \"B\", \"C\", \"N\", \"O\", \"F\", \"Na\", \"Mg\", \"Al\", \"Si\"…\n$ H     <int> 3228, 51, 66, 193, 330, 128, 3205, 141, 643, 472, 817, 1023, 524…\n$ Li    <int> 51, 51, 4, 8, 2, 0, 51, 4, 19, 6, 25, 39, 9, 1, 1, 6, 8, 0, 6, 0…\n$ Be    <int> 66, 4, 66, 3, 1, 0, 66, 1, 13, 4, 8, 31, 27, 0, 0, 4, 34, 0, 0, …\n$ B     <int> 193, 8, 3, 193, 13, 3, 192, 10, 50, 55, 52, 73, 3, 8, 24, 9, 89,…\n$ C     <int> 330, 2, 1, 13, 330, 23, 317, 12, 65, 55, 50, 46, 17, 30, 19, 11,…\n$ N     <int> 128, 0, 0, 3, 23, 128, 118, 5, 23, 13, 22, 10, 18, 48, 23, 6, 8,…\n$ O     <int> 3205, 51, 66, 192, 317, 118, 3205, 138, 643, 472, 817, 1021, 524…\n$ F     <int> 141, 4, 1, 10, 12, 5, 138, 141, 54, 22, 79, 58, 30, 24, 8, 14, 5…\n$ Na    <int> 643, 19, 13, 50, 65, 23, 643, 54, 643, 106, 182, 356, 89, 102, 3…\n$ Mg    <int> 472, 6, 4, 55, 55, 13, 472, 22, 106, 472, 147, 161, 86, 61, 28, …\n$ Al    <int> 817, 25, 8, 52, 50, 22, 817, 79, 182, 147, 817, 401, 169, 135, 3…\n$ Si    <int> 1023, 39, 31, 73, 46, 10, 1021, 58, 356, 161, 401, 1023, 15, 36,…\n$ P     <int> 524, 9, 27, 3, 17, 18, 524, 30, 89, 86, 169, 15, 524, 21, 1, 32,…\n$ S     <int> 531, 1, 0, 8, 30, 48, 531, 24, 102, 61, 135, 36, 21, 531, 27, 53…\n$ Cl    <int> 210, 1, 0, 24, 19, 23, 204, 8, 39, 28, 33, 36, 1, 27, 210, 26, 5…\n$ K     <int> 287, 6, 4, 9, 11, 6, 287, 14, 82, 50, 81, 162, 32, 53, 26, 287, …\n$ Ca    <int> 918, 8, 34, 89, 97, 8, 918, 58, 187, 131, 269, 424, 134, 84, 53,…\n$ Sc    <int> 8, 0, 0, 0, 0, 0, 8, 0, 1, 3, 0, 4, 3, 0, 0, 0, 5, 8, 0, 0, 0, 0…\n$ Ti    <int> 145, 6, 0, 3, 2, 0, 145, 18, 81, 11, 9, 116, 9, 2, 2, 30, 32, 0,…\n$ V     <int> 181, 0, 0, 3, 6, 8, 180, 2, 28, 24, 31, 27, 14, 12, 3, 10, 55, 0…\n$ Cr    <int> 40, 0, 0, 4, 5, 0, 40, 2, 7, 11, 4, 13, 2, 6, 3, 3, 11, 0, 1, 2,…\n$ Mn    <int> 406, 4, 9, 15, 17, 2, 406, 14, 81, 42, 70, 185, 98, 23, 17, 28, …\n$ Fe    <int> 663, 11, 9, 18, 22, 18, 663, 15, 130, 78, 136, 216, 176, 122, 32…\n$ Co    <int> 35, 0, 0, 0, 4, 1, 35, 0, 3, 0, 1, 1, 1, 12, 2, 0, 4, 0, 0, 1, 0…\n$ Ni    <int> 63, 0, 0, 0, 12, 4, 62, 0, 2, 1, 6, 7, 2, 15, 5, 1, 4, 0, 0, 2, …\n$ Cu    <int> 359, 1, 0, 4, 36, 10, 358, 6, 16, 16, 39, 29, 40, 87, 61, 16, 50…\n$ Zn    <int> 208, 0, 3, 0, 15, 1, 208, 1, 11, 16, 23, 32, 44, 46, 7, 7, 29, 0…\n$ Ga    <int> 4, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0…\n$ Ge    <int> 10, 0, 0, 0, 1, 0, 10, 0, 0, 0, 3, 1, 0, 4, 0, 0, 2, 0, 0, 0, 0,…\n$ As    <int> 397, 0, 3, 2, 4, 5, 397, 3, 36, 40, 42, 17, 9, 21, 14, 12, 112, …\n$ Se    <int> 26, 0, 0, 0, 0, 0, 26, 0, 2, 1, 4, 1, 0, 3, 2, 1, 3, 0, 0, 0, 0,…\n$ Br    <int> 3, 0, 0, 0, 0, 1, 3, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n$ Rb    <int> 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n$ Sr    <int> 77, 1, 0, 9, 12, 0, 77, 6, 23, 4, 30, 30, 15, 5, 2, 4, 20, 0, 8,…\n$ Y     <int> 54, 1, 1, 2, 27, 0, 54, 5, 18, 1, 13, 21, 6, 6, 2, 2, 18, 0, 2, …\n$ Zr    <int> 70, 1, 3, 2, 9, 0, 70, 3, 56, 2, 1, 58, 9, 1, 10, 10, 31, 0, 1, …\n$ Nb    <int> 54, 0, 0, 0, 4, 0, 54, 4, 26, 4, 1, 32, 4, 1, 2, 12, 17, 0, 7, 1…\n$ Mo    <int> 49, 0, 0, 0, 0, 1, 49, 0, 6, 4, 3, 0, 6, 5, 0, 4, 9, 0, 0, 0, 0,…\n$ Ru    <int> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n$ Rh    <int> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n$ Pd    <int> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n$ Ag    <int> 3, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 1, 2, 1, 0, 0, 0, 0, 0, 0…\n$ Cd    <int> 12, 0, 0, 0, 0, 0, 12, 1, 0, 0, 1, 0, 2, 8, 0, 1, 0, 0, 0, 0, 0,…\n$ In    <int> 2, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n$ Sn    <int> 21, 0, 2, 1, 0, 1, 20, 0, 2, 2, 2, 8, 0, 1, 2, 0, 7, 1, 0, 0, 0,…\n$ Sb    <int> 32, 0, 0, 0, 0, 0, 32, 0, 4, 2, 5, 2, 0, 10, 3, 2, 5, 0, 2, 0, 0…\n$ Te    <int> 52, 0, 0, 0, 2, 0, 52, 0, 0, 8, 1, 0, 0, 9, 7, 0, 6, 0, 0, 0, 1,…\n$ I     <int> 12, 0, 0, 0, 0, 1, 12, 0, 3, 3, 0, 0, 0, 1, 3, 2, 3, 0, 0, 0, 2,…\n$ Cs    <int> 12, 0, 1, 1, 0, 0, 12, 2, 4, 0, 2, 8, 1, 0, 0, 1, 4, 0, 2, 1, 0,…\n$ Ba    <int> 134, 2, 3, 4, 12, 0, 134, 16, 42, 11, 34, 76, 32, 5, 9, 8, 18, 1…\n$ La    <int> 29, 0, 0, 0, 7, 0, 29, 0, 3, 1, 14, 15, 3, 0, 0, 0, 10, 0, 1, 1,…\n$ Ce    <int> 77, 0, 2, 5, 16, 0, 77, 8, 17, 10, 25, 47, 8, 4, 1, 1, 28, 0, 13…\n$ Nd    <int> 19, 0, 1, 0, 8, 0, 19, 1, 1, 0, 3, 5, 3, 2, 0, 0, 5, 0, 0, 0, 0,…\n$ Sm    <int> 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n$ Gd    <int> 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0…\n$ Dy    <int> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n$ Er    <int> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n$ Yb    <int> 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n$ Hf    <int> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n$ Ta    <int> 5, 0, 0, 0, 0, 0, 5, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0…\n$ W     <int> 22, 0, 0, 0, 1, 0, 22, 0, 5, 1, 2, 3, 1, 0, 0, 0, 7, 0, 0, 1, 0,…\n$ Re    <int> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n$ Os    <int> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n$ Ir    <int> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n$ Pt    <int> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n$ Au    <int> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n$ Hg    <int> 11, 0, 0, 0, 3, 4, 10, 0, 0, 0, 1, 0, 1, 1, 4, 0, 0, 0, 0, 0, 0,…\n$ Tl    <int> 7, 0, 0, 0, 0, 0, 7, 0, 0, 0, 1, 0, 0, 4, 2, 2, 0, 0, 0, 2, 0, 0…\n$ Pb    <int> 229, 0, 1, 5, 28, 3, 228, 6, 3, 7, 27, 32, 27, 54, 39, 3, 13, 0,…\n$ Bi    <int> 42, 0, 0, 0, 0, 2, 41, 0, 1, 1, 1, 1, 11, 4, 1, 0, 1, 0, 0, 5, 1…\n$ Th    <int> 15, 0, 0, 1, 2, 0, 15, 2, 2, 0, 2, 4, 5, 0, 0, 1, 3, 0, 1, 0, 0,…\n$ U     <int> 272, 1, 0, 0, 41, 12, 272, 8, 33, 24, 21, 20, 51, 61, 2, 27, 54,…"
  },
  {
    "objectID": "posts/assignment-2-ver1/index.html#describe-the-data",
    "href": "posts/assignment-2-ver1/index.html#describe-the-data",
    "title": "Assignment 2: Your Data Ver1.0",
    "section": "DESCRIBE THE DATA",
    "text": "DESCRIBE THE DATA\n\nData Set Type\nThe dataset is stored as a great Flat Table, the items are arranged as each of the 72 elements, with the attributes of element triplets coexistence in the cells of corresponding sheets.\n\n\nElement list\nc('H', 'Li', 'Be', 'B', 'C', 'N', 'O', 'F', 'Na', 'Mg', 'Al', 'Si', 'P', 'S', 'Cl', 'K', 'Ca', 'Sc', 'Ti', 'V', 'Cr', 'Mn', 'Fe', 'Co', 'Ni', 'Cu', 'Zn', 'Ga', 'Ge', 'As', 'Se', 'Br', 'Rb', 'Sr', 'Y', 'Zr', 'Nb', 'Mo', 'Ru', 'Rh', 'Pd', 'Ag', 'Cd', 'In', 'Sn', 'Sb', 'Te', 'I', 'Cs', 'Ba', 'La', 'Ce', 'Nd', 'Sm', 'Gd', 'Dy', 'Er', 'Yb', 'Hf', 'Ta', 'W', 'Re', 'Os', 'Ir', 'Pt', 'Au', 'Hg', 'Tl', 'Pb', 'Bi', 'Th', 'U')\n\n\n [1] \"H\"  \"Li\" \"Be\" \"B\"  \"C\"  \"N\"  \"O\"  \"F\"  \"Na\" \"Mg\" \"Al\" \"Si\" \"P\"  \"S\"  \"Cl\"\n[16] \"K\"  \"Ca\" \"Sc\" \"Ti\" \"V\"  \"Cr\" \"Mn\" \"Fe\" \"Co\" \"Ni\" \"Cu\" \"Zn\" \"Ga\" \"Ge\" \"As\"\n[31] \"Se\" \"Br\" \"Rb\" \"Sr\" \"Y\"  \"Zr\" \"Nb\" \"Mo\" \"Ru\" \"Rh\" \"Pd\" \"Ag\" \"Cd\" \"In\" \"Sn\"\n[46] \"Sb\" \"Te\" \"I\"  \"Cs\" \"Ba\" \"La\" \"Ce\" \"Nd\" \"Sm\" \"Gd\" \"Dy\" \"Er\" \"Yb\" \"Hf\" \"Ta\"\n[61] \"W\"  \"Re\" \"Os\" \"Ir\" \"Pt\" \"Au\" \"Hg\" \"Tl\" \"Pb\" \"Bi\" \"Th\" \"U\" \n\n\n\n\nAttribute Types\nThe attributes of the data are recorded in a 2-dimensional format, therefore the data frame rows will looks similar to the result of glimpse function.\n\n\nCode\nhead(result)\n\n\n  zaxis yaxis    H Li Be   B   C   N    O   F  Na  Mg  Al   Si   P   S  Cl   K\n1     H     H 3228 51 66 193 330 128 3205 141 643 472 817 1023 524 531 210 287\n2     H    Li   51 51  4   8   2   0   51   4  19   6  25   39   9   1   1   6\n3     H    Be   66  4 66   3   1   0   66   1  13   4   8   31  27   0   0   4\n4     H     B  193  8  3 193  13   3  192  10  50  55  52   73   3   8  24   9\n5     H     C  330  2  1  13 330  23  317  12  65  55  50   46  17  30  19  11\n6     H     N  128  0  0   3  23 128  118   5  23  13  22   10  18  48  23   6\n   Ca Sc  Ti   V Cr  Mn  Fe Co Ni  Cu  Zn Ga Ge  As Se Br Rb Sr  Y Zr Nb Mo Ru\n1 918  8 145 181 40 406 663 35 63 359 208  4 10 397 26  3  1 77 54 70 54 49  0\n2   8  0   6   0  0   4  11  0  0   1   0  0  0   0  0  0  0  1  1  1  0  0  0\n3  34  0   0   0  0   9   9  0  0   0   3  0  0   3  0  0  0  0  1  3  0  0  0\n4  89  0   3   3  4  15  18  0  0   4   0  0  0   2  0  0  1  9  2  2  0  0  0\n5  97  0   2   6  5  17  22  4 12  36  15  0  1   4  0  0  0 12 27  9  4  0  0\n6   8  0   0   8  0   2  18  1  4  10   1  0  0   5  0  1  0  0  0  0  0  1  0\n  Rh Pd Ag Cd In Sn Sb Te  I Cs  Ba La Ce Nd Sm Gd Dy Er Yb Hf Ta  W Re Os Ir\n1  0  0  3 12  2 21 32 52 12 12 134 29 77 19  1  1  0  0  1  0  5 22  0  0  0\n2  0  0  0  0  0  0  0  0  0  0   2  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n3  0  0  0  0  0  2  0  0  0  1   3  0  2  1  0  0  0  0  1  0  0  0  0  0  0\n4  0  0  0  0  0  1  0  0  0  1   4  0  5  0  0  0  0  0  0  0  0  0  0  0  0\n5  0  0  0  0  0  0  0  2  0  0  12  7 16  8  0  1  0  0  0  0  0  1  0  0  0\n6  0  0  0  0  0  1  0  0  1  0   0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Pt Au Hg Tl  Pb Bi Th   U\n1  0  0 11  7 229 42 15 272\n2  0  0  0  0   0  0  0   1\n3  0  0  0  0   1  0  0   0\n4  0  0  0  0   5  0  1   0\n5  0  0  3  0  28  0  2  41\n6  0  0  4  0   3  2  0  12"
  },
  {
    "objectID": "posts/assignment-2-ver1/index.html#question",
    "href": "posts/assignment-2-ver1/index.html#question",
    "title": "Assignment 2: Your Data Ver1.0",
    "section": "Question",
    "text": "Question\n\n\n\n\n\n\nNote\n\n\n\n\nI have no idea why the render result of this .qmd file failed to adapt to the html style.\n\nThe problem is that the .qmd file shall not consist of the hashtag # symbol."
  },
  {
    "objectID": "posts/Poor-Assignment-2-in-plain-text/Assignment#2.html",
    "href": "posts/Poor-Assignment-2-in-plain-text/Assignment#2.html",
    "title": "Assignment 2: Plain Text",
    "section": "",
    "text": "This dataset is generated based on the elements coexistence counts from Mindat.org database. The original data source is retrieved via Mindat API and stored in JSON format. Then after data pre-process and data cleaning steps, the retrieved data is cured and stored in CSV format. The dataset can be accessed at the Github repository, in the name of total_elements_mindat.csv.\n\n\n\n\n\n\nNote\n\n\n\nThe CSV file of dataset is a concatenated version of 72 separate spread sheets of element triplets coexistence values. Each spread sheet has 2 + 72 columns, the first column indicates the background element, which should remain the same throughout each separate sheet. The second column records the second dimension of the element triplets Then the third dimension of elements are listed by the remaining columns. The value of cell \\((i, j)\\) indicating the coexistence amount of three elements: the first two elements in \\((i, 0)\\) and \\((i, 1)\\), and the third element in \\((0, j)\\).\n\n\n\n\nThe dataset was retrieved via Mindat API as a JSON file. In the data preprocessing step, the elements information are extracted and statistically recorded in a new JSON file. Then I reorganized the data into 72 spread sheets as CSV formats."
  },
  {
    "objectID": "posts/Poor-Assignment-2-in-plain-text/Assignment#2.html#importing-the-data",
    "href": "posts/Poor-Assignment-2-in-plain-text/Assignment#2.html#importing-the-data",
    "title": "Assignment 2: Plain Text",
    "section": "IMPORTING THE DATA",
    "text": "IMPORTING THE DATA\nI’m going to use the built-in read.csv package to import CSV file.\n\n\nCode\nlibrary(tidyverse)\nresult <- read.csv(file = 'total_elements_mindat.csv')\n\n\nThe glimpse command in the Tidyverse package is a nice way to summarize the data frame:\n\n\nCode\nglimpse(result)\n\n\nRows: 5,184\nColumns: 74\n$ zaxis <chr> \"H\", \"H\", \"H\", \"H\", \"H\", \"H\", \"H\", \"H\", \"H\", \"H\", \"H\", \"H\", \"H\",…\n$ yaxis <chr> \"H\", \"Li\", \"Be\", \"B\", \"C\", \"N\", \"O\", \"F\", \"Na\", \"Mg\", \"Al\", \"Si\"…\n$ H     <int> 3228, 51, 66, 193, 330, 128, 3205, 141, 643, 472, 817, 1023, 524…\n$ Li    <int> 51, 51, 4, 8, 2, 0, 51, 4, 19, 6, 25, 39, 9, 1, 1, 6, 8, 0, 6, 0…\n$ Be    <int> 66, 4, 66, 3, 1, 0, 66, 1, 13, 4, 8, 31, 27, 0, 0, 4, 34, 0, 0, …\n$ B     <int> 193, 8, 3, 193, 13, 3, 192, 10, 50, 55, 52, 73, 3, 8, 24, 9, 89,…\n$ C     <int> 330, 2, 1, 13, 330, 23, 317, 12, 65, 55, 50, 46, 17, 30, 19, 11,…\n$ N     <int> 128, 0, 0, 3, 23, 128, 118, 5, 23, 13, 22, 10, 18, 48, 23, 6, 8,…\n$ O     <int> 3205, 51, 66, 192, 317, 118, 3205, 138, 643, 472, 817, 1021, 524…\n$ F     <int> 141, 4, 1, 10, 12, 5, 138, 141, 54, 22, 79, 58, 30, 24, 8, 14, 5…\n$ Na    <int> 643, 19, 13, 50, 65, 23, 643, 54, 643, 106, 182, 356, 89, 102, 3…\n$ Mg    <int> 472, 6, 4, 55, 55, 13, 472, 22, 106, 472, 147, 161, 86, 61, 28, …\n$ Al    <int> 817, 25, 8, 52, 50, 22, 817, 79, 182, 147, 817, 401, 169, 135, 3…\n$ Si    <int> 1023, 39, 31, 73, 46, 10, 1021, 58, 356, 161, 401, 1023, 15, 36,…\n$ P     <int> 524, 9, 27, 3, 17, 18, 524, 30, 89, 86, 169, 15, 524, 21, 1, 32,…\n$ S     <int> 531, 1, 0, 8, 30, 48, 531, 24, 102, 61, 135, 36, 21, 531, 27, 53…\n$ Cl    <int> 210, 1, 0, 24, 19, 23, 204, 8, 39, 28, 33, 36, 1, 27, 210, 26, 5…\n$ K     <int> 287, 6, 4, 9, 11, 6, 287, 14, 82, 50, 81, 162, 32, 53, 26, 287, …\n$ Ca    <int> 918, 8, 34, 89, 97, 8, 918, 58, 187, 131, 269, 424, 134, 84, 53,…\n$ Sc    <int> 8, 0, 0, 0, 0, 0, 8, 0, 1, 3, 0, 4, 3, 0, 0, 0, 5, 8, 0, 0, 0, 0…\n$ Ti    <int> 145, 6, 0, 3, 2, 0, 145, 18, 81, 11, 9, 116, 9, 2, 2, 30, 32, 0,…\n$ V     <int> 181, 0, 0, 3, 6, 8, 180, 2, 28, 24, 31, 27, 14, 12, 3, 10, 55, 0…\n$ Cr    <int> 40, 0, 0, 4, 5, 0, 40, 2, 7, 11, 4, 13, 2, 6, 3, 3, 11, 0, 1, 2,…\n$ Mn    <int> 406, 4, 9, 15, 17, 2, 406, 14, 81, 42, 70, 185, 98, 23, 17, 28, …\n$ Fe    <int> 663, 11, 9, 18, 22, 18, 663, 15, 130, 78, 136, 216, 176, 122, 32…\n$ Co    <int> 35, 0, 0, 0, 4, 1, 35, 0, 3, 0, 1, 1, 1, 12, 2, 0, 4, 0, 0, 1, 0…\n$ Ni    <int> 63, 0, 0, 0, 12, 4, 62, 0, 2, 1, 6, 7, 2, 15, 5, 1, 4, 0, 0, 2, …\n$ Cu    <int> 359, 1, 0, 4, 36, 10, 358, 6, 16, 16, 39, 29, 40, 87, 61, 16, 50…\n$ Zn    <int> 208, 0, 3, 0, 15, 1, 208, 1, 11, 16, 23, 32, 44, 46, 7, 7, 29, 0…\n$ Ga    <int> 4, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0…\n$ Ge    <int> 10, 0, 0, 0, 1, 0, 10, 0, 0, 0, 3, 1, 0, 4, 0, 0, 2, 0, 0, 0, 0,…\n$ As    <int> 397, 0, 3, 2, 4, 5, 397, 3, 36, 40, 42, 17, 9, 21, 14, 12, 112, …\n$ Se    <int> 26, 0, 0, 0, 0, 0, 26, 0, 2, 1, 4, 1, 0, 3, 2, 1, 3, 0, 0, 0, 0,…\n$ Br    <int> 3, 0, 0, 0, 0, 1, 3, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n$ Rb    <int> 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n$ Sr    <int> 77, 1, 0, 9, 12, 0, 77, 6, 23, 4, 30, 30, 15, 5, 2, 4, 20, 0, 8,…\n$ Y     <int> 54, 1, 1, 2, 27, 0, 54, 5, 18, 1, 13, 21, 6, 6, 2, 2, 18, 0, 2, …\n$ Zr    <int> 70, 1, 3, 2, 9, 0, 70, 3, 56, 2, 1, 58, 9, 1, 10, 10, 31, 0, 1, …\n$ Nb    <int> 54, 0, 0, 0, 4, 0, 54, 4, 26, 4, 1, 32, 4, 1, 2, 12, 17, 0, 7, 1…\n$ Mo    <int> 49, 0, 0, 0, 0, 1, 49, 0, 6, 4, 3, 0, 6, 5, 0, 4, 9, 0, 0, 0, 0,…\n$ Ru    <int> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n$ Rh    <int> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n$ Pd    <int> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n$ Ag    <int> 3, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 1, 2, 1, 0, 0, 0, 0, 0, 0…\n$ Cd    <int> 12, 0, 0, 0, 0, 0, 12, 1, 0, 0, 1, 0, 2, 8, 0, 1, 0, 0, 0, 0, 0,…\n$ In    <int> 2, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n$ Sn    <int> 21, 0, 2, 1, 0, 1, 20, 0, 2, 2, 2, 8, 0, 1, 2, 0, 7, 1, 0, 0, 0,…\n$ Sb    <int> 32, 0, 0, 0, 0, 0, 32, 0, 4, 2, 5, 2, 0, 10, 3, 2, 5, 0, 2, 0, 0…\n$ Te    <int> 52, 0, 0, 0, 2, 0, 52, 0, 0, 8, 1, 0, 0, 9, 7, 0, 6, 0, 0, 0, 1,…\n$ I     <int> 12, 0, 0, 0, 0, 1, 12, 0, 3, 3, 0, 0, 0, 1, 3, 2, 3, 0, 0, 0, 2,…\n$ Cs    <int> 12, 0, 1, 1, 0, 0, 12, 2, 4, 0, 2, 8, 1, 0, 0, 1, 4, 0, 2, 1, 0,…\n$ Ba    <int> 134, 2, 3, 4, 12, 0, 134, 16, 42, 11, 34, 76, 32, 5, 9, 8, 18, 1…\n$ La    <int> 29, 0, 0, 0, 7, 0, 29, 0, 3, 1, 14, 15, 3, 0, 0, 0, 10, 0, 1, 1,…\n$ Ce    <int> 77, 0, 2, 5, 16, 0, 77, 8, 17, 10, 25, 47, 8, 4, 1, 1, 28, 0, 13…\n$ Nd    <int> 19, 0, 1, 0, 8, 0, 19, 1, 1, 0, 3, 5, 3, 2, 0, 0, 5, 0, 0, 0, 0,…\n$ Sm    <int> 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n$ Gd    <int> 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0…\n$ Dy    <int> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n$ Er    <int> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n$ Yb    <int> 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n$ Hf    <int> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n$ Ta    <int> 5, 0, 0, 0, 0, 0, 5, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0…\n$ W     <int> 22, 0, 0, 0, 1, 0, 22, 0, 5, 1, 2, 3, 1, 0, 0, 0, 7, 0, 0, 1, 0,…\n$ Re    <int> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n$ Os    <int> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n$ Ir    <int> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n$ Pt    <int> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n$ Au    <int> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n$ Hg    <int> 11, 0, 0, 0, 3, 4, 10, 0, 0, 0, 1, 0, 1, 1, 4, 0, 0, 0, 0, 0, 0,…\n$ Tl    <int> 7, 0, 0, 0, 0, 0, 7, 0, 0, 0, 1, 0, 0, 4, 2, 2, 0, 0, 0, 2, 0, 0…\n$ Pb    <int> 229, 0, 1, 5, 28, 3, 228, 6, 3, 7, 27, 32, 27, 54, 39, 3, 13, 0,…\n$ Bi    <int> 42, 0, 0, 0, 0, 2, 41, 0, 1, 1, 1, 1, 11, 4, 1, 0, 1, 0, 0, 5, 1…\n$ Th    <int> 15, 0, 0, 1, 2, 0, 15, 2, 2, 0, 2, 4, 5, 0, 0, 1, 3, 0, 1, 0, 0,…\n$ U     <int> 272, 1, 0, 0, 41, 12, 272, 8, 33, 24, 21, 20, 51, 61, 2, 27, 54,…"
  },
  {
    "objectID": "posts/Poor-Assignment-2-in-plain-text/Assignment#2.html#describe-the-data",
    "href": "posts/Poor-Assignment-2-in-plain-text/Assignment#2.html#describe-the-data",
    "title": "Assignment 2: Plain Text",
    "section": "DESCRIBE THE DATA",
    "text": "DESCRIBE THE DATA\n\nData Set Type\nThe dataset is stored as a great Flat Table, the items are arranged as each of the 72 elements, with the attributes of element triplets coexistence in the cells of corresponding sheets.\n\n\nElement list\nc('H', 'Li', 'Be', 'B', 'C', 'N', 'O', 'F', 'Na', 'Mg', 'Al', 'Si', 'P', 'S', 'Cl', 'K', 'Ca', 'Sc', 'Ti', 'V', 'Cr', 'Mn', 'Fe', 'Co', 'Ni', 'Cu', 'Zn', 'Ga', 'Ge', 'As', 'Se', 'Br', 'Rb', 'Sr', 'Y', 'Zr', 'Nb', 'Mo', 'Ru', 'Rh', 'Pd', 'Ag', 'Cd', 'In', 'Sn', 'Sb', 'Te', 'I', 'Cs', 'Ba', 'La', 'Ce', 'Nd', 'Sm', 'Gd', 'Dy', 'Er', 'Yb', 'Hf', 'Ta', 'W', 'Re', 'Os', 'Ir', 'Pt', 'Au', 'Hg', 'Tl', 'Pb', 'Bi', 'Th', 'U')\n\n\n [1] \"H\"  \"Li\" \"Be\" \"B\"  \"C\"  \"N\"  \"O\"  \"F\"  \"Na\" \"Mg\" \"Al\" \"Si\" \"P\"  \"S\"  \"Cl\"\n[16] \"K\"  \"Ca\" \"Sc\" \"Ti\" \"V\"  \"Cr\" \"Mn\" \"Fe\" \"Co\" \"Ni\" \"Cu\" \"Zn\" \"Ga\" \"Ge\" \"As\"\n[31] \"Se\" \"Br\" \"Rb\" \"Sr\" \"Y\"  \"Zr\" \"Nb\" \"Mo\" \"Ru\" \"Rh\" \"Pd\" \"Ag\" \"Cd\" \"In\" \"Sn\"\n[46] \"Sb\" \"Te\" \"I\"  \"Cs\" \"Ba\" \"La\" \"Ce\" \"Nd\" \"Sm\" \"Gd\" \"Dy\" \"Er\" \"Yb\" \"Hf\" \"Ta\"\n[61] \"W\"  \"Re\" \"Os\" \"Ir\" \"Pt\" \"Au\" \"Hg\" \"Tl\" \"Pb\" \"Bi\" \"Th\" \"U\" \n\n\n\n\nAttribute Types\nThe attributes of the data are recorded in a 2-dimensional format, therefore the data frame rows will looks similar to the result of glimpse function.\n\n\nCode\nhead(result)\n\n\n  zaxis yaxis    H Li Be   B   C   N    O   F  Na  Mg  Al   Si   P   S  Cl   K\n1     H     H 3228 51 66 193 330 128 3205 141 643 472 817 1023 524 531 210 287\n2     H    Li   51 51  4   8   2   0   51   4  19   6  25   39   9   1   1   6\n3     H    Be   66  4 66   3   1   0   66   1  13   4   8   31  27   0   0   4\n4     H     B  193  8  3 193  13   3  192  10  50  55  52   73   3   8  24   9\n5     H     C  330  2  1  13 330  23  317  12  65  55  50   46  17  30  19  11\n6     H     N  128  0  0   3  23 128  118   5  23  13  22   10  18  48  23   6\n   Ca Sc  Ti   V Cr  Mn  Fe Co Ni  Cu  Zn Ga Ge  As Se Br Rb Sr  Y Zr Nb Mo Ru\n1 918  8 145 181 40 406 663 35 63 359 208  4 10 397 26  3  1 77 54 70 54 49  0\n2   8  0   6   0  0   4  11  0  0   1   0  0  0   0  0  0  0  1  1  1  0  0  0\n3  34  0   0   0  0   9   9  0  0   0   3  0  0   3  0  0  0  0  1  3  0  0  0\n4  89  0   3   3  4  15  18  0  0   4   0  0  0   2  0  0  1  9  2  2  0  0  0\n5  97  0   2   6  5  17  22  4 12  36  15  0  1   4  0  0  0 12 27  9  4  0  0\n6   8  0   0   8  0   2  18  1  4  10   1  0  0   5  0  1  0  0  0  0  0  1  0\n  Rh Pd Ag Cd In Sn Sb Te  I Cs  Ba La Ce Nd Sm Gd Dy Er Yb Hf Ta  W Re Os Ir\n1  0  0  3 12  2 21 32 52 12 12 134 29 77 19  1  1  0  0  1  0  5 22  0  0  0\n2  0  0  0  0  0  0  0  0  0  0   2  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n3  0  0  0  0  0  2  0  0  0  1   3  0  2  1  0  0  0  0  1  0  0  0  0  0  0\n4  0  0  0  0  0  1  0  0  0  1   4  0  5  0  0  0  0  0  0  0  0  0  0  0  0\n5  0  0  0  0  0  0  0  2  0  0  12  7 16  8  0  1  0  0  0  0  0  1  0  0  0\n6  0  0  0  0  0  1  0  0  1  0   0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Pt Au Hg Tl  Pb Bi Th   U\n1  0  0 11  7 229 42 15 272\n2  0  0  0  0   0  0  0   1\n3  0  0  0  0   1  0  0   0\n4  0  0  0  0   5  0  1   0\n5  0  0  3  0  28  0  2  41\n6  0  0  4  0   3  2  0  12"
  },
  {
    "objectID": "posts/Poor-Assignment-2-in-plain-text/Assignment#2.html#question",
    "href": "posts/Poor-Assignment-2-in-plain-text/Assignment#2.html#question",
    "title": "Assignment 2: Plain Text",
    "section": "Question",
    "text": "Question\n\n\n\n\n\n\nNote\n\n\n\nI have no idea why the render result of this .qmd file failed to adapt to the html style."
  },
  {
    "objectID": "posts/welcome/index.html",
    "href": "posts/welcome/index.html",
    "title": "Welcome To My Blog",
    "section": "",
    "text": "This is the first post in a Quarto blog. Welcome!\n\nSince this post doesn’t specify an explicit image, the first image in the post will be used in the listing page of posts."
  },
  {
    "objectID": "posts/assignment-2-ver2/index.html",
    "href": "posts/assignment-2-ver2/index.html",
    "title": "Assignment 2: Your Data Ver2.0",
    "section": "",
    "text": "This dataset is generated based on the elements coexistence counts from Mindat.org database. The original data source is retrieved via Mindat API and stored in JSON format. Then after data pre-process and data cleaning steps, the retrieved data is cured and stored in CSV format. The dataset can be accessed at the Github repository, in the name of mineral.csv.\n\n\n\n\n\nThe dataset was retrieved via Mindat API as a JSON file. In the data preprocessing step, the elements information are extracted in a new JSON file, in which some of the hierarchical structures have been removed in convenience of python’s to_csv function. Then the exported csv file can be read directly with R’s read.csv function."
  },
  {
    "objectID": "posts/assignment-2-ver2/index.html#importing-the-data",
    "href": "posts/assignment-2-ver2/index.html#importing-the-data",
    "title": "Assignment 2: Your Data Ver2.0",
    "section": "IMPORTING THE DATA",
    "text": "IMPORTING THE DATA\nI’m going to use the built-in read.csv package to import CSV file.\n\n\nCode\nlibrary(tidyverse)\n# result <- read.csv(file = 'total_elements_mindat.csv')\nresult <- read.csv(file = 'mineral.csv')\n\n\nThe glimpse command in the Tidyverse package is a nice way to summarize the data frame:\n\n\nCode\nglimpse(result)\n\n\nRows: 5,883\nColumns: 17\n$ id              <int> 1, 2, 3, 4, 9, 10, 13, 14, 18, 19, 21, 23, 27, 31, 32,…\n$ name            <chr> \"Abelsonite\", \"Abenakiite-(Ce)\", \"Abernathyite\", \"Abhu…\n$ elements        <chr> \"-Ni-N-C-H-\", \"-Ce-Na-Si-O-P-C-S-\", \"-As-O-K-H-U-\", \"-…\n$ sigelements     <chr> \"-Ni-N-C-H-\", \"-Ce-Na-Si-O-P-C-S-\", \"-As-O-K-H-U-\", \"-…\n$ yeardiscovery   <chr> \"1975\", \"\", \"1956\", \"1983\", \"1990\", \"1855\", \"1974\", \"1…\n$ hmin            <dbl> 2.0, 4.0, 2.5, 2.0, 6.5, 2.0, 1.0, 2.5, 5.0, 3.5, 3.5,…\n$ hmax            <dbl> 3.0, 5.0, 3.0, 2.0, 6.5, 2.5, 1.5, 2.5, 6.0, 3.5, 3.5,…\n$ hardtype        <int> 0, 0, 0, 3, 0, 3, 0, 0, 3, 0, 3, 0, 0, 0, 0, 0, 0, 0, …\n$ specificgravity <chr> \"1.4\", \"3.21\", \"\", \"4.29\", \"\", \"7.24 (calc)  7.2-7.4(m…\n$ strunz10ed1     <int> 10, 9, 8, 3, 9, 2, 10, 2, 9, 3, 8, 8, 6, 9, 9, 9, 9, 8…\n$ strunz10ed2     <chr> \"C\", \"C\", \"E\", \"D\", \"A\", \"B\", \"A\", \"C\", \"D\", \"C\", \"B\",…\n$ strunz10ed3     <chr> \"A\", \"K\", \"B\", \"A\", \"G\", \"A\", \"A\", \"C\", \"E\", \"C\", \"B\",…\n$ strunz10ed4     <chr> \"20\", \"10\", \"15\", \"30\", \"05\", \"35\", \"20\", \"05\", \"10\", …\n$ dana8ed1        <chr> \"50\", \"61\", \"40\", \"10\", \"7\", \"2\", \"50\", \"0\", \"0\", \"11\"…\n$ dana8ed2        <chr> \"4\", \"4\", \"2a\", \"5\", \"5\", \"4\", \"4\", \"0\", \"0\", \"6\", \"6\"…\n$ dana8ed3        <chr> \"9\", \"1\", \"9\", \"9\", \"1\", \"1\", \"7\", \"0\", \"0\", \"17\", \"6\"…\n$ dana8ed4        <chr> \"1\", \"1\", \"1\", \"1\", \"4\", \"1\", \"1\", \"0\", \"0\", \"1\", \"3\",…"
  },
  {
    "objectID": "posts/assignment-2-ver2/index.html#describe-the-data",
    "href": "posts/assignment-2-ver2/index.html#describe-the-data",
    "title": "Assignment 2: Your Data Ver2.0",
    "section": "DESCRIBE THE DATA",
    "text": "DESCRIBE THE DATA\n\nData Set Type\nThe dataset is stored as a great Flat Table, the items are 5883 mineral species from OpenMindat data server, and the columns representing the corresponding attributes.\n\n\nMineral Species Attributes\nc('id', 'name', 'elements', 'sigelements', 'yeardiscovery', 'hmin', 'hmax', 'hardtype', 'specificgravity', 'strunz10ed1', 'strunz10ed2', 'strunz10ed3', 'strunz10ed4', 'dana8ed1', 'dana8ed2', 'dana8ed3', 'dana8ed4')\n\n\n [1] \"id\"              \"name\"            \"elements\"        \"sigelements\"    \n [5] \"yeardiscovery\"   \"hmin\"            \"hmax\"            \"hardtype\"       \n [9] \"specificgravity\" \"strunz10ed1\"     \"strunz10ed2\"     \"strunz10ed3\"    \n[13] \"strunz10ed4\"     \"dana8ed1\"        \"dana8ed2\"        \"dana8ed3\"       \n[17] \"dana8ed4\"       \n\n\n\n\nAttribute Types\nThe attributes of the data are recorded in a 2-dimensional format, therefore the data frame rows will looks similar to the result of glimpse function. The ‘id’ field is in a strict ascending order, while not continuous. The ‘id’ field of each row is determined by the website managers or data providers, therefore it has nothing to do with some standard identifications. The ‘names’ field indicates the IMA approved mineral species names. The ‘elements’ and ‘sigelements’ fields indicating the elements of the mineral chemical formual, while the ‘sigelement’ is determined by some significant elements as a subset of ‘elements’. In compatable with csv format, the elements in this field are separated by hyphens \\(-\\).\n\n\nCode\nhead(result)\n\n\n  id            name           elements        sigelements yeardiscovery hmin\n1  1      Abelsonite         -Ni-N-C-H-         -Ni-N-C-H-          1975  2.0\n2  2 Abenakiite-(Ce) -Ce-Na-Si-O-P-C-S- -Ce-Na-Si-O-P-C-S-                4.0\n3  3    Abernathyite       -As-O-K-H-U-       -As-O-K-H-U-          1956  2.5\n4  4        Abhurite        -Cl-Sn-O-H-        -Cl-Sn-O-H-          1983  2.0\n5  9  Abswurmbachite       -Cu-Mn-Si-O-       -Cu-Mn-Si-O-          1990  6.5\n6 10       Acanthite             -Ag-S-             -Ag-S-          1855  2.0\n  hmax hardtype            specificgravity strunz10ed1 strunz10ed2 strunz10ed3\n1  3.0        0                        1.4          10           C           A\n2  5.0        0                       3.21           9           C           K\n3  3.0        0                                      8           E           B\n4  2.0        3                       4.29           3           D           A\n5  6.5        0                                      9           A           G\n6  2.5        3 7.24 (calc)  7.2-7.4(meas)           2           B           A\n  strunz10ed4 dana8ed1 dana8ed2 dana8ed3 dana8ed4\n1          20       50        4        9        1\n2          10       61        4        1        1\n3          15       40       2a        9        1\n4          30       10        5        9        1\n5          05        7        5        1        4\n6          35        2        4        1        1"
  },
  {
    "objectID": "posts/assignment-2-ver2/index.html#question",
    "href": "posts/assignment-2-ver2/index.html#question",
    "title": "Assignment 2: Your Data Ver2.0",
    "section": "Question",
    "text": "Question\n\n\n\n\n\n\nNote\n\n\n\n\nI have no idea why the render result of this .qmd file failed to adapt to the html style.\n\nThe problem is that the .qmd file shall not consist of the hashtag # symbol.\nAnother issue fixed is that the json file is originally contains 5883 items, which should be converted into 5883 rows of csv items. While the converting results shows there were over 5900 rows. The reason for this problem is that there are some annoying \\ns in the attributes, which will end up with new rows in the exported csv file. I fixed this issue by simply removing all the \\ns in the json file."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "Brief Description\nA Pokemon master. This is my first blog created via quarto.\n\n\nEducation Experience\nGraduated from the Primary Pokemon School of Masala Town."
  },
  {
    "objectID": "posts/assignment-2-ver2/index.html#visualization",
    "href": "posts/assignment-2-ver2/index.html#visualization",
    "title": "Assignment 2: Your Data Ver2.0",
    "section": "Visualization",
    "text": "Visualization\n\nThe correaltion between elements and hardness\n\nElements <- c('H', 'Li', 'Be', 'B', 'C', 'N', 'O', 'F', 'Na', 'Mg', 'Al', 'Si', 'P', 'S', 'Cl', 'K', 'Ca', 'Sc', 'Ti', 'V', 'Cr', 'Mn', 'Fe', 'Co', 'Ni', 'Cu', 'Zn', 'Ga', 'Ge', 'As', 'Se', 'Br', 'Rb', 'Sr', 'Y', 'Zr', 'Nb', 'Mo', 'Ru', 'Rh', 'Pd', 'Ag', 'Cd', 'In', 'Sn', 'Sb', 'Te', 'I', 'Cs', 'Ba', 'La', 'Ce', 'Nd', 'Sm', 'Gd', 'Dy', 'Er', 'Yb', 'Hf', 'Ta', 'W', 'Re', 'Os', 'Ir', 'Pt', 'Au', 'Hg', 'Tl', 'Pb', 'Bi', 'Th', 'U')\nlibrary(\"tidyverse\")\n\ndf <- data.frame(Elements)\ndf1 <- df %>%\n  add_column(hmin = NA, hmin_mineral = NA, hmax = NA, hmax_mineral = NA, hmean = NA)\n\n# for (row in 1:nrow(result)) {\n#     mineral_name <- result[row, \"name\"]\n#     elements <- str_extract_all(\n#       result[row, \"elements\"], regex(\"(?<=-)[A-Z]+[a-z]*(?=-)\")\n#       )\n# \n#     hmin <- result[row, \"hmin\"]\n#     for (element in elements){\n#         comparing_hmin <- df1[df1$Elements == element, 'hmin']\n#         if (is.na(comparing_hmin)){\n#           df1[df1$Elements == element, 'hmin'] <- hmin\n#         }\n#     }\n#     # hmax <- result[row, \"hmax\"]\n# }\n\nprint(df1)\n\n   Elements hmin hmin_mineral hmax hmax_mineral hmean\n1         H   NA           NA   NA           NA    NA\n2        Li   NA           NA   NA           NA    NA\n3        Be   NA           NA   NA           NA    NA\n4         B   NA           NA   NA           NA    NA\n5         C   NA           NA   NA           NA    NA\n6         N   NA           NA   NA           NA    NA\n7         O   NA           NA   NA           NA    NA\n8         F   NA           NA   NA           NA    NA\n9        Na   NA           NA   NA           NA    NA\n10       Mg   NA           NA   NA           NA    NA\n11       Al   NA           NA   NA           NA    NA\n12       Si   NA           NA   NA           NA    NA\n13        P   NA           NA   NA           NA    NA\n14        S   NA           NA   NA           NA    NA\n15       Cl   NA           NA   NA           NA    NA\n16        K   NA           NA   NA           NA    NA\n17       Ca   NA           NA   NA           NA    NA\n18       Sc   NA           NA   NA           NA    NA\n19       Ti   NA           NA   NA           NA    NA\n20        V   NA           NA   NA           NA    NA\n21       Cr   NA           NA   NA           NA    NA\n22       Mn   NA           NA   NA           NA    NA\n23       Fe   NA           NA   NA           NA    NA\n24       Co   NA           NA   NA           NA    NA\n25       Ni   NA           NA   NA           NA    NA\n26       Cu   NA           NA   NA           NA    NA\n27       Zn   NA           NA   NA           NA    NA\n28       Ga   NA           NA   NA           NA    NA\n29       Ge   NA           NA   NA           NA    NA\n30       As   NA           NA   NA           NA    NA\n31       Se   NA           NA   NA           NA    NA\n32       Br   NA           NA   NA           NA    NA\n33       Rb   NA           NA   NA           NA    NA\n34       Sr   NA           NA   NA           NA    NA\n35        Y   NA           NA   NA           NA    NA\n36       Zr   NA           NA   NA           NA    NA\n37       Nb   NA           NA   NA           NA    NA\n38       Mo   NA           NA   NA           NA    NA\n39       Ru   NA           NA   NA           NA    NA\n40       Rh   NA           NA   NA           NA    NA\n41       Pd   NA           NA   NA           NA    NA\n42       Ag   NA           NA   NA           NA    NA\n43       Cd   NA           NA   NA           NA    NA\n44       In   NA           NA   NA           NA    NA\n45       Sn   NA           NA   NA           NA    NA\n46       Sb   NA           NA   NA           NA    NA\n47       Te   NA           NA   NA           NA    NA\n48        I   NA           NA   NA           NA    NA\n49       Cs   NA           NA   NA           NA    NA\n50       Ba   NA           NA   NA           NA    NA\n51       La   NA           NA   NA           NA    NA\n52       Ce   NA           NA   NA           NA    NA\n53       Nd   NA           NA   NA           NA    NA\n54       Sm   NA           NA   NA           NA    NA\n55       Gd   NA           NA   NA           NA    NA\n56       Dy   NA           NA   NA           NA    NA\n57       Er   NA           NA   NA           NA    NA\n58       Yb   NA           NA   NA           NA    NA\n59       Hf   NA           NA   NA           NA    NA\n60       Ta   NA           NA   NA           NA    NA\n61        W   NA           NA   NA           NA    NA\n62       Re   NA           NA   NA           NA    NA\n63       Os   NA           NA   NA           NA    NA\n64       Ir   NA           NA   NA           NA    NA\n65       Pt   NA           NA   NA           NA    NA\n66       Au   NA           NA   NA           NA    NA\n67       Hg   NA           NA   NA           NA    NA\n68       Tl   NA           NA   NA           NA    NA\n69       Pb   NA           NA   NA           NA    NA\n70       Bi   NA           NA   NA           NA    NA\n71       Th   NA           NA   NA           NA    NA\n72        U   NA           NA   NA           NA    NA\n\nprint(df1[df1$Elements == 'H', 'hmin'])\n\n[1] NA\n\n\n\ncomparing_hmin <- df1[df1$Elements == 'H', 'hmin']\nprint(comparing_hmin)\n\n[1] NA\n\nif (is.na(comparing_hmin)){\n  # df1[df1$Elements == element, 'hmin'] <- hmin\n  print('hello')\n}\n\n[1] \"hello\"\n\nelements <- str_extract_all(\n      result[1, \"elements\"], regex(\"(?<=-)[A-Z]+[a-z]*(?=-)\")\n      )\nprint(elements)\n\n[[1]]\n[1] \"Ni\" \"N\"  \"C\"  \"H\" \n\n# for (element in elements){\n#   comparing_name <- df1[df1$Elements == element, 'Elements']\n#   #v comparing_hmin <- df1[df1$Elements == element, 'hmin']\n#   #print(element, sep = '\\n')\n#   print(comparing_name, sep = '\\n')\n#   #cat(comparing_hmin, sep = '\\n')\n# }\n\n\nprint(class(elements))\n\n[1] \"list\"\n\nfor (i in 1:length(elements)){\n  print(elements[i])\n  print('hello')\n  }\n\n[[1]]\n[1] \"Ni\" \"N\"  \"C\"  \"H\" \n\n[1] \"hello\"\n\nfor (element in elements){\n  print(element)\n  print('hello')\n }\n\n[1] \"Ni\" \"N\"  \"C\"  \"H\" \n[1] \"hello\"\n\n# comparing_hmin <- df1[df1$Elements == 'H', 'hmin']\n# print(comparing_hmin)\n# print(class(comparing_hmin))\n# if (is.na(comparing_hmin)){\n#   print('test')\n# }\n\n\n# x <- c('-Ce-Na-Si-O-P-C-S-')\n# y <- str_extract_all(x, regex(\"(?<=-)[A-Z]+[a-z]*(?=-)\"))\n# for (item in y){\n#   cat(item, sep=\"\\n\")\n# }\n#   \n# \n# primes_list <- list(2, 3, 5, 7, 11, 13)\n\n# # loop version 1\n# for (p in primes_list) {\n#   print(p)\n# }"
  },
  {
    "objectID": "posts/assignment-3/index.html",
    "href": "posts/assignment-3/index.html",
    "title": "Assignment 3",
    "section": "",
    "text": "This dataset is generated based on the elements coexistence counts from Mindat.org database. The original data source is retrieved via Mindat API and stored in JSON format. Then after data pre-process and data cleaning steps, the retrieved data is cured and stored in CSV format. The dataset can be accessed at the Github repository, in the name of hardness.\n\n\n\n\n\nThe dataset was retrieved via Mindat API as a JSON file. In the data preprocessing step, the elements information are extracted in a new JSON file, in which some of the hierarchical structures have been removed in convenience of python’s to_csv function. Then the exported csv file can be read directly with R’s read.csv function."
  },
  {
    "objectID": "posts/assignment-3/index.html#importing-the-data",
    "href": "posts/assignment-3/index.html#importing-the-data",
    "title": "Assignment 3",
    "section": "IMPORTING THE DATA",
    "text": "IMPORTING THE DATA\nI’m going to use the built-in read.csv package to import CSV file.\n\n\nCode\nlibrary(tidyverse)\n# result <- read.csv(file = 'total_elements_mindat.csv')\ndf_72 <- read.csv(file = 'hardness.csv')\ndf_30 <- read.csv(file = 'hardness_30.csv')\n\n\nThe glimpse command in the Tidyverse package is a nice way to summarize the data frame:\n\n\nCode\nglimpse(df_72)\n\n\nRows: 72\nColumns: 7\n$ X            <int> 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16,…\n$ elements     <chr> \"H\", \"Li\", \"Be\", \"B\", \"C\", \"N\", \"O\", \"F\", \"Na\", \"Mg\", \"Al…\n$ hmin         <dbl> 0.5, 1.0, 1.0, 1.0, 1.0, 1.0, 0.5, 1.0, 0.5, 1.0, 0.5, 0.…\n$ hmin_mineral <chr> \"Rectorite\", \"Hectorite\", \"Beryllite\", \"Barberiite\", \"Ace…\n$ hmax         <dbl> 9.0, 8.0, 9.0, 10.0, 10.0, 10.0, 9.0, 8.0, 8.0, 9.0, 9.0,…\n$ hmax_mineral <chr> \"Bahianite\", \"Pezzottaite\", \"Bromellite\", \"Qingsongite\", …\n$ hmean        <lgl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…"
  },
  {
    "objectID": "posts/assignment-3/index.html#describe-the-data",
    "href": "posts/assignment-3/index.html#describe-the-data",
    "title": "Assignment 3",
    "section": "DESCRIBE THE DATA",
    "text": "DESCRIBE THE DATA\n\nData Set Type\nThe dataset is stored as a great Flat Table, the items are 5883 mineral species from OpenMindat data server, and the columns representing the corresponding attributes.\n\n\nMineral Species Attributes\nc('elements', 'hmin', 'hmin_mineral', 'hmax', 'hmax_mineral', 'hmean')\n\n\n[1] \"elements\"     \"hmin\"         \"hmin_mineral\" \"hmax\"         \"hmax_mineral\"\n[6] \"hmean\"       \n\n\n\n\nAttribute Types\nThe attributes of the data are recorded in a 2-dimensional format, therefore the data frame rows will looks similar to the result of glimpse function. The ‘id’ field is in a strict ascending order, while not continuous. The ‘id’ field of each row is determined by the website managers or data providers, therefore it has nothing to do with some standard identifications. The ‘names’ field indicates the IMA approved mineral species names. The ‘elements’ and ‘sigelements’ fields indicating the elements of the mineral chemical formual, while the ‘sigelement’ is determined by some significant elements as a subset of ‘elements’. In compatable with csv format, the elements in this field are separated by hyphens \\(-\\).\n\n\nCode\nhead(df_72)\n\n\n  X elements hmin hmin_mineral hmax hmax_mineral hmean\n1 0        H  0.5    Rectorite    9    Bahianite    NA\n2 1       Li  1.0    Hectorite    8  Pezzottaite    NA\n3 2       Be  1.0    Beryllite    9   Bromellite    NA\n4 3        B  1.0   Barberiite   10  Qingsongite    NA\n5 4        C  1.0    Acetamide   10      Diamond    NA\n6 5        N  1.0    Acetamide   10  Qingsongite    NA\n\n\n\n\nTASK ABSTRACTION\n\nDiscover Hardness Distributions\nAmong all of the confusing hardness records in tens of elements, we want to sense the approximate hardness distribution via visualization.\n\nlibrary(ggplot2)\nggplot(df_72, aes(x=elements, y=hmax)) +\n  geom_point(size=2, shape=23)\n\n\n\n\n\nhead(df_30)\n\n  X elements hmin hmin_mineral hmax hmax_mineral hmean\n1 0        H  0.5    Rectorite    9    Bahianite    NA\n2 1        B  1.0   Barberiite   10  Qingsongite    NA\n3 2        C  1.0    Acetamide   10      Diamond    NA\n4 3        O  0.5    Rectorite    9    Bahianite    NA\n5 4        F  1.0   Barberiite    8        Topaz    NA\n6 5       Na  0.5    Rectorite    8 Diaoyudaoite    NA\n\nggplot(df_30, aes(x=elements, y=hmin)) +\n  geom_point(size=2, shape=23)\n\n\n\nggplot(df_30, aes(x=elements, y=hmax)) +\n  geom_point(size=2, shape=23)"
  },
  {
    "objectID": "posts/assignment-3/index.html#question",
    "href": "posts/assignment-3/index.html#question",
    "title": "Assignment 3",
    "section": "Question",
    "text": "Question\n\n\n\n\n\n\nNote\n\n\n\n\nI have no idea why the render result of this .qmd file failed to adapt to the html style.\n\nThe problem is that the .qmd file shall not consist of the hashtag # symbol.\nAnother issue fixed is that the json file is originally contains 5883 items, which should be converted into 5883 rows of csv items. While the converting results shows there were over 5900 rows. The reason for this problem is that there are some annoying \\ns in the attributes, which will end up with new rows in the exported csv file. I fixed this issue by simply removing all the \\ns in the json file.\n\nif condition longer than 1\nfor loop chaos\nrendering failed blocks"
  },
  {
    "objectID": "posts/assignment-4/index.html",
    "href": "posts/assignment-4/index.html",
    "title": "Assignment 4",
    "section": "",
    "text": "Code\nlibrary(tidyverse)\n# result <- read.csv(file = 'total_elements_mindat.csv')\nmineral <- read.csv(file = 'mineral.csv')\n# result <- read.csv(file = 'total_elements_mindat.csv')\n# df_72 <- read.csv(file = 'hardness.csv')\ndf_30 <- read.csv(file = 'hardness_30.csv')"
  },
  {
    "objectID": "posts/assignment-4/index.html#funny-visualization",
    "href": "posts/assignment-4/index.html#funny-visualization",
    "title": "Assignment 4",
    "section": "Funny visualization",
    "text": "Funny visualization\n\nExpressiveness and Effectiveness\n** Wrong Version:** Our main theme is about the hardness of minerals. To best demonstrate the characteristic of our elements list, I choose to visualize the index of the elements.\n\n\nCode\nhead(df_30)\n\n\n  X elements hmin hmin_mineral hmax hmax_mineral hmean\n1 0        H  0.5    Rectorite    9    Bahianite    NA\n2 1        B  1.0   Barberiite   10  Qingsongite    NA\n3 2        C  1.0    Acetamide   10      Diamond    NA\n4 3        O  0.5    Rectorite    9    Bahianite    NA\n5 4        F  1.0   Barberiite    8        Topaz    NA\n6 5       Na  0.5    Rectorite    8 Diaoyudaoite    NA\n\n\nCode\n# ggplot(df_30, aes(x=elements, y=X)) +\nggplot(df_30, aes(x=factor(elements, level=elements), y=X)) +\n  geom_point(size=2, shape=as.integer(df_30$X)) + \n  labs(title = \"Expressiveness and Effectiveness\",\n              subtitle = \"Plot of elements by shapes\",\n              caption = \"The hardness for elements\")\n\n\nWarning in grid.Call.graphics(C_points, x$x, x$y, x$pch, x$size): unimplemented\npch value '26'\n\n\nWarning in grid.Call.graphics(C_points, x$x, x$y, x$pch, x$size): unimplemented\npch value '27'\n\n\nWarning in grid.Call.graphics(C_points, x$x, x$y, x$pch, x$size): unimplemented\npch value '28'\n\n\n\n\n\n** Corrected Version:**\n\n\nCode\nhead(df_30)\n\n\n  X elements hmin hmin_mineral hmax hmax_mineral hmean\n1 0        H  0.5    Rectorite    9    Bahianite    NA\n2 1        B  1.0   Barberiite   10  Qingsongite    NA\n3 2        C  1.0    Acetamide   10      Diamond    NA\n4 3        O  0.5    Rectorite    9    Bahianite    NA\n5 4        F  1.0   Barberiite    8        Topaz    NA\n6 5       Na  0.5    Rectorite    8 Diaoyudaoite    NA\n\n\nCode\n# ggplot(df_30, aes(x=elements, y=X)) +\nggplot(df_30, aes(x=factor(elements, level=elements), y=hmax)) +\n  geom_point(size=2) + \n  labs(title = \"Expressiveness and Effectiveness\",\n              subtitle = \"Plot of element hardness by position\",\n              caption = \"The hardness for elements\")\n\n\n\n\n\n\n\nDiscriminability\n** Wrong Version:** In terms of discriminability, we believe the larger the axis, the more details can viz to reveal.\n\n\nCode\nggplot(df_30, aes(x=elements, y=hmax)) +\n  ylim(0, 100) +\n  geom_point(size=2, shape=23) + \n  labs(title = \"Discriminability\",\n              subtitle = \"Plot of element hardness with large y-axis\",\n              caption = \"The hardness for elements\")\n\n\n\n\n\n** Corrected Version:**\n\n\nCode\nggplot(df_30, aes(x=elements, y=hmax)) +\n  ylim(0, 10) +\n  geom_point(size=2, shape=23) + \n  labs(title = \"Discriminability\",\n              subtitle = \"Plot of element hardness with proper y-axis\",\n              caption = \"The hardness for elements\")\n\n\n\n\n\n\n\nSeparability\n** Wrong Version:** We noticed that the values of ‘hmin’ are too small to tell, so we amplified it by applying exponential transform.\n\n\nCode\nggplot(df_30, aes(x=elements, y=exp(hmax))) +\n  geom_point(size=2, shape=23) + \n  labs(title = \"Separability\",\n              subtitle = \"Plot of element hardness with exponential transform on hmin.\",\n              caption = \"The hardness for elements\")\n\n\n\n\n\nCode\n  #scale_y_continuous(trans='log2')\n\n\n** Corrected Version:**\n\n\nCode\nggplot(df_30, aes(x=elements, y=log(hmax))) +\n  geom_point(size=2, shape=23) + \n  labs(title = \"Separability\",\n              subtitle = \"Plot of element hardness with proper y-axis\",\n              caption = \"The hardness for elements\")\n\n\n\n\n\nCode\n  #scale_y_continuous(trans='log2')\n\n\n\n\nPopout\nNothing can be more striking than the areas of the scatters. And guess what? We will also add some colors to make it as eye-catching as rainbow!\n\n\nCode\nggplot(df_30, aes(x=elements, y=hmax)) +\n  geom_point(size=df_30$hmax, shape=23, colour = factor(as.integer(df_30$hmax)))"
  },
  {
    "objectID": "posts/assignment-4/index.html#expressiveness-and-effectiveness",
    "href": "posts/assignment-4/index.html#expressiveness-and-effectiveness",
    "title": "Assignment 4",
    "section": "Expressiveness and Effectiveness",
    "text": "Expressiveness and Effectiveness\n\nCorrected Version\n\n\nCode\n# head(df_30)\n# # ggplot(df_30, aes(x=elements, y=X)) +\n# ggplot(df_30, aes(x=factor(elements, level=elements), y=hmax)) +\n#   geom_point(size=2) + \n#   labs(title = \"Fig 1. Expressiveness and Effectiveness\",\n#               subtitle = \"Plot of element hardness by length\",\n#               caption = \"The hardness for elements\")\n\n# head(mineral)\nggplot(mineral, aes(x=hmax)) + geom_histogram()+ \n  labs(title = \"Fig 1. The hardness distribution among minerals\",\n              subtitle = \"Channel: Length, Mark: Lines\",\n              caption = \"The hardness for elements\")\n\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\n\nCode\n# # Change the width of bins\n# ggplot(mineral, aes(x=hmax)) +\n#   geom_histogram(binwidth=1)\n# # Change colors\n# p<-ggplot(mineral) +\n#   geom_histogram(color=\"black\", fill=\"white\")\n# p\n\n\n\n\nWrong Version\nOur main theme is about the hardness of minerals. To best demonstrate the characteristic of our elements list, I choose to visualize the index of the elements.\n\n\nCode\n# head(df_30)\n# ggplot(df_30, aes(x=elements, y=X)) +\n# ggplot(df_30, aes(x=factor(elements, level=elements), y=X)) +\n#   geom_point(size=2, shape=as.integer(df_30$X)) + \n#   labs(title = \"Fig 2. The hardness distribution among minerals\",\n#               subtitle = \"Plot of elements by shapes\",\n#               caption = \"The hardness for elements\")\n\nggplot(df_30, aes(x=factor(elements, level=elements), y=X)) +\n  geom_point(size=2, shape=as.integer(df_30$hmax)) + \n  labs(title = \"Fig 2. The hardness distribution among elements\",\n              subtitle = \"Channel: Shape, Mark: Points\",\n              caption = \"The hardness for elements\")"
  },
  {
    "objectID": "posts/assignment-4/index.html#discriminability",
    "href": "posts/assignment-4/index.html#discriminability",
    "title": "Assignment 4",
    "section": "Discriminability",
    "text": "Discriminability\n\nCorrected Version\n\n\nCode\n#head(df_30)\n# ggplot(df_30, aes(x=elements, y=X)) +\nggplot(df_30, aes(x=factor(elements, level=elements), y=hmax)) +\n  geom_point(size=2) +\n  labs(title = \"Fig 3. The hardness distribution among elements\",\n              subtitle = \"Channel: Position, Mark: Points\",\n              caption = \"The hardness for elements\")\n\n\n\n\n\n\n\nWrong Version\n\n\nCode\nggplot(mineral, aes(x=sigelements, y=hmax)) +\n  geom_point(size=2) +\n  labs(title = \"Fig 4. The hardness distribution among sigelements\",\n              subtitle = \"Channel: Position, Mark: Points\",\n              caption = \"The hardness for elements\")"
  },
  {
    "objectID": "posts/assignment-4/index.html#separability",
    "href": "posts/assignment-4/index.html#separability",
    "title": "Assignment 4",
    "section": "Separability",
    "text": "Separability\n\nCorrected Version\n\n\nCode\nggplot(df_30, aes(x=factor(elements, level=elements), y=hmax)) +\n  geom_point(size=2, shape=23) + \n  labs(title = \"Fig 5. Distribution of element-wised hardness\",\n              subtitle = \"Channel: Position, Mark: Points\",\n              caption = \"The hardness for elements\")\n\n\n\n\n\nCode\n  #scale_y_continuous(trans='log2')\n\n\n\n\nWrong Version\nWe noticed that the values of ‘hmin’ are too small to tell, so we amplified it by applying exponential transform.\n\n\nCode\n# ggplot(df_30, aes(x=elements, y=hmax)) +\n#   geom_point(size=2, shape=23) + \n#   labs(title = \"Separability\",\n#               subtitle = \"Plot of element hardness with exponential transform on hmin.\",\n#               caption = \"The hardness for elements\")\n#   #scale_y_continuous(trans='log2')\n# Basic piechart\nggplot(df_30, aes(x=factor(elements, level=elements), y=hmax, fill=factor(elements, level=elements))) +\n  geom_bar(stat=\"identity\", width=1) +\n  coord_polar(\"y\", start=0) + \n  labs(title = \"Fig 6. Pie chart of element-wised hardness\",\n              subtitle = \"Channel: Color, Mark: Length\",\n              caption = \"The hardness for elements\")"
  },
  {
    "objectID": "posts/assignment-4/index.html#popout",
    "href": "posts/assignment-4/index.html#popout",
    "title": "Assignment 4",
    "section": "Popout",
    "text": "Popout\n\nCorrected Version\n\n\nCode\nggplot(df_30, aes(x=elements, y=hmax)) +\n  geom_point(size=2, shape=23, colour = factor(as.integer(df_30$hmax))) + \n  labs(title = \"Fig 7. Pie chart of element-wised hardness\",\n              subtitle = \"Channel: Position, Color, Mark: Points\",\n              caption = \"The hardness for elements\")\n\n\n\n\n\n\n\nWrong Version\nNothing can be more striking than the areas of the scatters. And guess what? We will also add some colors to make it as eye-catching as rainbow!\n\n\nCode\nggplot(df_30, aes(x=elements, y=hmax)) +\n  geom_point(size=df_30$hmax, shape=23, colour = factor(as.integer(df_30$hmax))) + \n  labs(title = \"Fig 6. Pie chart of element-wised hardness\",\n              subtitle = \"Channel: Position, Color, Mark: Points, Area\",\n              caption = \"The hardness for elements\")"
  },
  {
    "objectID": "posts/assignment-5/index.html",
    "href": "posts/assignment-5/index.html",
    "title": "ASSIGNMENT 5: Happy Hockey",
    "section": "",
    "text": "In this assignment, we are going to practice creating visualizations for tabular data. Unlike previous assignments, however, this time we will all be using the same data sets. I’m doing this because I want everyone to engage in the same logic process and have the same design objectives in mind."
  },
  {
    "objectID": "posts/assignment-5/index.html#scenario",
    "href": "posts/assignment-5/index.html#scenario",
    "title": "ASSIGNMENT 5: Happy Hockey",
    "section": "SCENARIO",
    "text": "SCENARIO\nImagine you are a high priced data science consultant. One of your good friends, Cassandra Canuck, is an Assistant General Manager for the Vancouver Canucks, a team in the National Hockey League with a long, long…. long history of futility.\nCassandra tells you her boss, General Manager Hans Doofenschmirtz, is considering trading this year’s first round draft pick for two second round picks and one third round pick from another team. For the purposes of this exercise, let’s set the 2023 NHL draft order using the Tankathon Simulator. The NHL uses a lottery system in which the teams lowest in the standings have the highest odds of getting the first overall pick. I’ll simulate the lottery now…\nHOLY CRAP! The Vancouver Canucks jump up 6 spots, and will pick FIRST overall. Here is a screenshot:\n\nOur official scenario is this:\nVancouver receives: The 7th pick in the second round (39th overall), the 10th pick in the second round (42nd overall), and the 10th pick in the third round (74th overall).\nDetroit receives: The 1st pick in the first round (1st overall).\nDoofenschmirtz reasons that more draft picks are better, and is inclined to make the trade. Cassandra isn’t so sure…\nShe asks you to create some data visualizations she can show to her boss that might help him make the best decision."
  },
  {
    "objectID": "posts/assignment-5/index.html#directions",
    "href": "posts/assignment-5/index.html#directions",
    "title": "ASSIGNMENT 5: Happy Hockey",
    "section": "DIRECTIONS",
    "text": "DIRECTIONS\nCreate a new post in your portfolio for this assignment. Call it something cool, like NHL draft analysis, or Hockey Analytics, or John Wick….\nCopy the data files from the repository, and maybe also the .qmd file.\nUse the .qmd file as the backbone of your assignment, changing the code and the markdown text as you go."
  },
  {
    "objectID": "posts/assignment-5/index.html#the-data",
    "href": "posts/assignment-5/index.html#the-data",
    "title": "ASSIGNMENT 5: Happy Hockey",
    "section": "THE DATA",
    "text": "THE DATA\nHow can we evaluate whether trading a first round pick for two second round picks and a third round pick is a good idea? One approach is to look at the historical performance of players from these draft rounds.\nI’ve created a data set that will allow us to explore player performance as a function of draft position. If you are curious as to how I obtained and re-arranged these data, you can check out that tutorial here. For this assignment, though, I want to focus on the visualizations.\n\n\nCode\nlibrary(tidyverse)\nlibrary(dplyr)\nlibrary(ggplot2)\nlibrary(readxl)\nlibrary(plotly)\n\n\n\n\nCode\nNHLDraft<-read.csv(\"NHLDraft.csv\")\nNHLDictionary<-read_excel(\"NHLDictionary.xlsx\")\nglimpse(NHLDraft)\n\n\nRows: 105,936\nColumns: 12\n$ X           <int> 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17,…\n$ draftyear   <int> 2001, 2001, 2001, 2001, 2001, 2001, 2001, 2001, 2001, 2001…\n$ name        <chr> \"Drew Fata\", \"Drew Fata\", \"Drew Fata\", \"Drew Fata\", \"Drew …\n$ round       <int> 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3…\n$ overall     <int> 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86…\n$ pickinRound <int> 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23…\n$ height      <int> 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73…\n$ weight      <int> 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209…\n$ position    <chr> \"Defense\", \"Defense\", \"Defense\", \"Defense\", \"Defense\", \"De…\n$ playerId    <int> 8469535, 8469535, 8469535, 8469535, 8469535, 8469535, 8469…\n$ postdraft   <int> 0, 1, 2, 4, 5, 10, 11, 12, 13, 3, 6, 7, 8, 9, 14, 15, 16, …\n$ NHLgames    <int> 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n\n\nCode\nknitr::kable(NHLDictionary)\n\n\n\n\n\n\n\n\n\n\nAttribute\nType\nDescription\n\n\n\n\ndraftyear\nOrdinal\nCalendar year in which the player was drafted into the NHL.\n\n\nname\nItem\nFull name of the player.\n\n\nround\nOrdinal\nRound in which the player was drafted (1 to 7).\n\n\noverall\nOrdinal\nOverall draft position of the player (1 to 224)\n\n\npickinRound\nOrdinal\nPosition in which the player was drafted in their round (1 to 32).\n\n\nheight\nQuantitative\nPlayer height in inches.\n\n\nweight\nQuantitative\nPlayer weight in pounds.\n\n\nposition\nCategorical\nPlayer position (Forward, Defense, Goaltender)\n\n\nplayerId\nItem\nUnique ID (key) assigned to each player.\n\n\npostdraft\nOrdinal\nNumber of seasons since being drafted (0 to 20).\n\n\nNHLgames\nQuantitative\nNumber of games played in the NHL in that particular season (regular season is 82 games, playoffs are up to 28 more).\n\n\n\n\n\nIn this case, we have a dataframe with all the drafted players since 2000, their position, their draft year and position, and then rows for each season since being drafted (postdraft). The key variable here is NHLgames, which tells us how many games they played in the NHL each season since being drafted."
  },
  {
    "objectID": "posts/assignment-5/index.html#simple-scatterplot",
    "href": "posts/assignment-5/index.html#simple-scatterplot",
    "title": "ASSIGNMENT 5: Happy Hockey",
    "section": "SIMPLE SCATTERPLOT",
    "text": "SIMPLE SCATTERPLOT\nOne thing to realize about professional hockey is that it is pretty rare for a player to play in the NHL right after being drafted. Players get drafted when they are 18 years old, and they usually play in the juniors, minor leagues, or the NCAA for a bit to further develop. Let’s use a scatterplot to visualize this phenomenon with the most recent draft classes.\n\n\nCode\ndraft2022<-NHLDraft%>%\n  filter(draftyear==2022 & postdraft==0)\n\nggplot(draft2022, aes(x=round, y=NHLgames))+\n  geom_point()\n\n\n\n\n\nAs you can see, the players drafted in June of 2022 haven’t played much this season. There are few things wrong with this visualization, however:\n\nOverplotting. All those points on the y=0 line represent about 32 players each. Can you think of a way that adding extra channels might help?\nLabelling. Can we create a solid figure caption and better axis labels for this figure? In your caption, please specify the task(s) the visualization is intended to facilitate, as well as the marks, channels, and key-value pairs used.\nKey-Value pairs: Looks like we are using “round” as a continuous variable. Can we change this to an ordered factor?\n\n\nSolution:\n\n\nCode\nggplot(draft2022, aes(x=as.factor(round), fill = factor(NHLgames))) +\n  geom_bar(position = \"stack\", stat = \"count\")+\n  geom_text(aes(label = paste0(\"n=\", after_stat(count))), stat='count', position = position_stack(vjust = 0.5)) +\n  theme_classic()+ \n  labs(title = \"Fig 1. The # of games after a player been drafted\",\n              subtitle = \"Channel: Length, Mark: Bars\",\n              caption = \"The draft year of 2022\")\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\nI don’t know how to adjust the y-axis according to the count instead of the scale from 0 to 1.\n\nSolution: changing the position of geom_bar from fill to stack."
  },
  {
    "objectID": "posts/assignment-5/index.html#expanded-scatterplot",
    "href": "posts/assignment-5/index.html#expanded-scatterplot",
    "title": "ASSIGNMENT 5: Happy Hockey",
    "section": "EXPANDED SCATTERPLOT",
    "text": "EXPANDED SCATTERPLOT\nThe data from the most recent draft isn’t really helpful for our question. Let’s go back in time and use a draft year that has had some time to develop and reach their potential. How about 2018?\n\n\nCode\ndraft2018<-NHLDraft%>%\n  filter(draftyear==2018 & postdraft<6)\n\nggplot(draft2018, aes(x=round, y=NHLgames))+\n  geom_point()\n\n\n\n\n\nHmmm… in addition to the problem of overplotting, we’ve got an additional issue here. We actually have two keys and one attribute. The attribute is NHLgames, and the keys are round and postdraft, but we are only using round.\nPostdraft indicates the number of seasons after being drafted. We have several choices here. We can make a visualization that uses both keys, or we can somehow summarize the data for one of the keys.\nFor example, let’s say we just wanted to know the TOTAL number of NHL games played since being drafted.\n\n\nCode\ndrafttot2018<- draft2018%>%\n  group_by(playerId, round, overall, position, name)%>%\n  summarise(totgames=sum(NHLgames))\n\n\n`summarise()` has grouped output by 'playerId', 'round', 'overall', 'position'.\nYou can override using the `.groups` argument.\n\n\nCode\nggplot(drafttot2018, aes(x=round, y=totgames))+\n  geom_point()\n\n\n\n\n\nFine, I guess, but we still have to deal with overplotting, and think about whether a scatterplot really helps us accomplish our task. For this figure do the following:\n\nOverplotting. All those points on the y=0 line represent about 32 players each. Can you you think of a way that adding extra channels might help?\nLabelling. Can we create a solid figure caption and better axis labels for this figure? In your caption, please specify the task(s) the visualizaiton is intended to facilitate, as well as the marks, channels, and key-value pairs used.\nKey-Value pairs: Looks like we are using “round” as a continuous variable. Can we change this to an ordered factor?\n\n\nSolution\n\n\nCode\ndrafttot2018 <- transform(\n  drafttot2018, has_game = ifelse(totgames>0, TRUE, FALSE)\n)\nggplot(drafttot2018, aes(x=as.factor(round), fill = factor(has_game))) +\n  geom_bar(stat = \"count\",\n           #position = drafttot2018$NHLgames\n           position = \"stack\"\n           )+\n  geom_text(aes(label = paste0(factor(has_game))), stat='count', position = position_stack(vjust = 0.5)) +\n  labs(title = \"Fig 2.2 Games after a player been drafted for 6 seasons\",\n              subtitle = \"Channel: Length, Mark: Bars\",\n              caption = \"The draft year of 2018\")\n\n\n\n\n\n\n\nCode\nggplot(drafttot2018, aes(x=as.factor(round), fill = factor(totgames))) +\n  geom_bar(stat = \"count\",\n           #position = drafttot2018$NHLgames\n           position = \"fill\"\n           )+\n  geom_text(aes(label = paste0(totgames)), stat='count', position = position_fill(vjust = 0.5)) +\n  labs(title = \"Fig 2.1 Games after a player been drafted for 6 seasons\",\n              subtitle = \"Channel: Length, Mark: Bars\",\n              caption = \"The draft year of 2018\")"
  },
  {
    "objectID": "posts/assignment-5/index.html#scatterplot-with-overall-draft-position",
    "href": "posts/assignment-5/index.html#scatterplot-with-overall-draft-position",
    "title": "ASSIGNMENT 5: Happy Hockey",
    "section": "SCATTERPLOT WITH OVERALL DRAFT POSITION",
    "text": "SCATTERPLOT WITH OVERALL DRAFT POSITION\nThis approach might yield a better match with the scatterplot idiom. What if we ignore draft round, and use the player’s overall draft position instead?\n\n\nCode\nggplot(drafttot2018, aes(x=overall, y=totgames))+\n  geom_point()\n\n\n\n\n\nFor this figure, address the following:\n\nWe are trying to address the notion of trading a pick from round 1 for picks from round 2 and 3. Add visual channels to this plot that will help us make that decision.\nCreate a caption and better axis labels for this figure.\nWhat if we wanted to use more than just the 2018 draft class?\n\n\nSolution\n\n\nCode\n# library(reshape2)\n# test_df <- melt(data.frame(drafttot2018$overall, drafttot2018$totgames)) %>%\n#   mutate(val_trimmed = case_when(\n#     drafttot2018$overall > 32 * 2 ~ 32 * 2,\n#     drafttot2018$overall < 32 ~ 32,\n#     T ~ drafttot2018$overall\n#   ))\n\ncols <- c(\"#1170AA\", \"#55AD89\", \"#EF6F6A\")\nggplot(subset(drafttot2018, round <= 3), aes(x=overall, y=totgames, color = factor(round)))+\n  geom_point()+\n  scale_color_manual(values = cols) +\n  scale_x_continuous(name =\"Position of the players\")+\n  labs(title = \"Fig 3.1 Total games for the players from first three round\",\n              subtitle = \"Channel: Position, Mark: Point\",\n              caption = \"The draft year of 2018\")\n\n\n\n\n\n\n\nCode\n# options(dplyr.summarise.inform = FALSE)\n# draft_postdraft_l6<-NHLDraft%>%\n#   filter(postdraft<6)\n# \n# drafttot_postdraft_l6<- draft_postdraft_l6%>%\n#   group_by(draftyear, playerId, round, overall, position, name)%>%\n#   summarise(totgames=sum(NHLgames))\n# \n# cols <- c(\"#1170AA\", \"#55AD89\", \"#EF6F6A\")\n# ggplot(subset(drafttot_postdraft_l6, round <= 3), aes(x=overall, y=totgames, shape = factor(round), color = factor(draftyear)))+\n#   geom_point()+\n#   #scale_color_manual(values = cols) +\n#   scale_x_continuous(name =\"Position of the players\")+\n#   labs(title = \"Fig 3.2 Games for first three round players (post draft < 6)\",\n#               subtitle = \"Channel: Position, Mark: Point\",\n#               caption = \"The draft years from 2000 to 2022\")\n\n\n\n\nCode\n# https://r-graph-gallery.com/histogram_several_group.html\n# http://www.sthda.com/english/wiki/wiki.php?id_contents=7904\nlibrary(viridis)\n\n\nLoading required package: viridisLite\n\n\nCode\n#library(forcats)\n\noptions(dplyr.summarise.inform = FALSE)\ndraft_postdraft_l6<-NHLDraft%>%\n  filter(postdraft<6)\n\ndrafttot_postdraft_l6<- draft_postdraft_l6%>%\n  group_by(draftyear, playerId, round, overall, position, name)%>%\n  summarise(totgames=sum(NHLgames))\n\nggplot(subset(drafttot_postdraft_l6, round <= 3), \n       aes(x=overall, y=totgames, color=factor(round))) + \n  geom_point() + \n  scale_fill_viridis(discrete=TRUE) +\n  scale_color_viridis(discrete=TRUE) +\n  xlab(\"\") +\n  ylab(\"totgames\") +\n  #facet_grid( ~ draftyear)\n  facet_wrap(~draftyear)+\n  scale_x_continuous(name =\"Position of the players\")+\n  labs(title = \"Fig 3.2 Games for first three round players (post draft < 6)\",\n              subtitle = \"Channel: Position, Mark: Point\",\n              caption = \"The draft years from 2000 to 2022\")\n\n\n\n\n\nCode\n# p <- data %>%\n#   #mutate(text = fct_reorder(draftyear, totgames)) %>%\n#   ggplot( aes(x=overall, color=factor(draftyear), fill=factor(draftyear))) +\n#     geom_histogram(alpha=0.6, binwidth = 5) +\n#     scale_fill_viridis(discrete=TRUE) +\n#     scale_color_viridis(discrete=TRUE) +\n#     #theme_ipsum() +\n#     # theme(\n#     #   legend.position=\"none\",\n#     #   panel.spacing = unit(0.1, \"lines\"),\n#     #   strip.text.x = element_text(size = 8)\n#     # ) +\n#     xlab(\"\") +\n#     ylab(\"totgames\") +\n#     facet_wrap(~draftyear)\n# p"
  },
  {
    "objectID": "posts/assignment-5/index.html#scatterplot-summary",
    "href": "posts/assignment-5/index.html#scatterplot-summary",
    "title": "ASSIGNMENT 5: Happy Hockey",
    "section": "SCATTERPLOT SUMMARY",
    "text": "SCATTERPLOT SUMMARY\nWe seem to be running into an issue in terms of overplotting. Scatterplots are great, but they work best for two quantitative attributes, and we have a situation with one or two keys and one quantitative attribute. The thing is, scatterplots can be very useful when part of our workflow involves modeling the data in some way. We’ll cover this kind of thing in future assignments, but just a bit of foreshadowing here:\n\n\nCode\nggplot(drafttot2018, aes(x=round, y=totgames))+\n  geom_point()+\n  geom_smooth()\n\n\n`geom_smooth()` using method = 'loess' and formula 'y ~ x'\n\n\n\n\n\nAdding the smoothed line doesn’t eliminate the overplotting problem, but it does indicate that it exists. We’ll cover other potential solutions (including Cody’s violin plots!) to this issue later in the course, when we get to the notions of faceting and data reduction.\n\nSolution\n\n\nCode\ncols <- c(\"#1170AA\", \"#55AD89\", \"#EF6F6A\")\nggplot(subset(drafttot2018, round <= 3), aes(x=overall, y=totgames, color = factor(round)))+\n  geom_point()+\n  geom_smooth()+\n  scale_color_manual(values = cols) +\n  scale_x_continuous(name =\"Position of the players\")+\n  labs(title = \"Fig 3.1 Total games for the players from first three round\",\n              subtitle = \"Channel: Position, Mark: Point, Line\",\n              caption = \"The draft year of 2018\")\n\n\n`geom_smooth()` using method = 'loess' and formula 'y ~ x'"
  },
  {
    "objectID": "posts/assignment-5/index.html#simple-bar-chart",
    "href": "posts/assignment-5/index.html#simple-bar-chart",
    "title": "ASSIGNMENT 5: Happy Hockey",
    "section": "SIMPLE BAR CHART",
    "text": "SIMPLE BAR CHART\nOne of the best ways to deal with overplotting is to use our keys to SEPARATE and ORDER our data. Let’s do that now. I’ll stick with the summarized data for the 2018 draft year for now.\n\n\nCode\nggplot(drafttot2018, aes(x = name, y=totgames))+\n  geom_col()\n\n\n\n\n\nEpic. We now have a bar (column, really) chart with the key being player name, and the attribute being the total number of games played. We’ve SEPARATED the data using the spatial x-axis position channel, and aligned to that axis as well. But this visualization clearly sucks. You need to make it better by:\n\nAdding a visual channel indicating draft round.\nFixing the order of the x axis.\nMaking a caption and better axis labels.\nFixing the values of the x axis labels so they aren’t such a mess.\n\n\nSolution\n\n\nCode\ndrafttot2018_sorted  <- drafttot2018[order(drafttot2018$round), ]\n\ncolor_palette <- viridis(length(unique(drafttot2018_sorted$round)))\n\nplot <- plot_ly(drafttot2018_sorted, x = ~name, y = ~totgames, type = \"bar\", color = ~as.factor(round),\n                colors = color_palette)\nplot <- plot %>%\n  layout(xaxis = list(type = \"category\", automargin = TRUE),\n         margin = list(l = 100),\n         title = list(text = paste0('Fig 4.1 Total games for the players',\n                                    '<br>',\n                                    '<sup>',\n                                    'Channel: Position, Mark: Point, Line',\n                                    '</sup>')),\n         annotations = \n           list(x = 1, y = -0.1, text = \"The draft year of 2018\", \n                showarrow = F, xref='paper', yref='paper', \n                xanchor='right', yanchor='auto', xshift=0, yshift=-100,\n                font=list(size=15, color=\"black\")))%>%\n  config(scrollZoom = TRUE)%>%\n  layout(xaxis = list(categoryorder = \"array\", categoryarray = drafttot2018_sorted$name))\n\nggplotly(plot)\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nI tried to suppress the warning messages here by suppressWarnings() but failed."
  },
  {
    "objectID": "posts/assignment-5/index.html#stacked-bar",
    "href": "posts/assignment-5/index.html#stacked-bar",
    "title": "ASSIGNMENT 5: Happy Hockey",
    "section": "STACKED BAR?",
    "text": "STACKED BAR?\nStacked bar charts use two keys and one value. Can we leverage this idiom? Perhaps if we used both round and postdraft as our keys and NHLgames as our value…\nThe idea here is that we might be able to get a sense of the temporal pattern of NHL games after a player is drafted. Do first round picks join the NHL earlier? Do they stay in the NHL longer? That kind of thing.\n\n\nCode\nggplot(draft2018, aes(x = postdraft, y=NHLgames, fill=as.factor(round)))+\n  geom_col(position = \"stack\")\n\n\n\n\n\nThis seems like it has some potential, but it definitely needs some work (by you):\n\nYou know the drill by now. Caption! Labels!\nImprove the color palette.\nDo we really only want data from the 2018 draft class?\nConsider the order of rounds within the stack (glyph). Which round is most important? Change the order within the glyphs to reflect this.\n\n\nSolution\n\n\nCode\nggplot(draft2018, aes(x = as.factor(postdraft), y=NHLgames, fill=factor(round, levels = rev(unique(round)))))+\n  geom_col(position = \"stack\")+\n  scale_fill_viridis(discrete = TRUE, direction = -1)+\nlabs(title = \"Fig 5.1 NHLgames for the players according to postdraft\",\n     subtitle = \"Channel: Length, Color, Mark: Line\",\n     caption = \"The draft year of 2018\")\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nI don’t quite understand the question: > Do we really only want data from the 2018 draft class?\nDo you mean we should plot other stacked charts with different x-axis?\n\n\n\n\nCode\nggplot(draft2018, aes(x = as.factor(pickinRound), y=NHLgames, fill=factor(round, levels = rev(unique(round)))))+\n  geom_col(position = \"stack\")+\n  scale_fill_viridis(discrete = TRUE, direction = -1)+\nlabs(title = \"Fig 5.2 NHLgames for the players according to pickinRound\",\n     subtitle = \"Channel: Length, Color, Mark: Line\",\n     caption = \"The draft year of 2018\")"
  },
  {
    "objectID": "posts/assignment-5/index.html#pie-charts-normalized-bar-charts",
    "href": "posts/assignment-5/index.html#pie-charts-normalized-bar-charts",
    "title": "ASSIGNMENT 5: Happy Hockey",
    "section": "PIE CHARTS / NORMALIZED BAR CHARTS",
    "text": "PIE CHARTS / NORMALIZED BAR CHARTS\nWe all know that Pie Charts are rarely a good choice, but let’s look at how to make one here. I’ll eliminate all the players drafted in 2018 who never played an NHL game, leaving us 80 players drafted in that year who made “THE SHOW”. Let’s look at how those 80 players were drafted:\n\n\nCode\nplayedNHL2018 <- drafttot2018%>%\n  filter(totgames>0)\n\nggplot(playedNHL2018, aes(x = \"\", fill = factor(round))) +\n  geom_bar(width = 1) +\n  coord_polar(theta = \"y\")\n\n\n\n\n\nObviously this isn’t great, but can you state why? Write a little critique of this visualizaiton that:\n\nConsiders a player who played hundreds of games over their first five years vs a player who played one game in five years.\nEvaluates the relative value of a second round pick and a third round pick.\n\n\nMy critique\n\nThis pie chart presented all the players with positive values in 2018 NHL games, but neglected the number of the games, which weaken the values of frequent game players within each round.\nThe pie chart without a proper legend will result in a difficulty to reader to quickly recognize the difference between similar valued pies.\n\nNow let’s change this to account for the various years post draft:\n\n\nCode\nseasonplayedNHL2018 <- draft2018%>%\n  filter(NHLgames>0)\n\n\nggplot(seasonplayedNHL2018, aes(x = \"\", fill = factor(round))) +\n  geom_bar(width = 1) +\n  coord_polar(theta = \"y\")+\n  facet_wrap(~postdraft)\n\n\n\n\n\nSeems like there is something to work with here, but let’s compare this to a normalized bar chart:\n\n\nCode\nggplot(draft2018, aes(x = postdraft, y=NHLgames, fill=as.factor(round)))+\n  geom_col(position = \"fill\")\n\n\nWarning: Removed 218 rows containing missing values (geom_col).\n\n\n\n\n\nCan you work with this to make it a useful visualization for your friend, Cassandra Canuck?\n\n\nSolution\n\n\nCode\nggplot(draft2018, aes(x = as.factor(postdraft), y = NHLgames, fill = as.factor(round))) +\n  geom_bar(stat = \"identity\", position = \"stack\")+\nlabs(title = \"Fig 6.1 NHLgames for postdraft\",\n     subtitle = \"Channel: Length, Color; Mark: Line\",\n     caption = \"The draft year of 2018\")"
  },
  {
    "objectID": "posts/assignment-5/index.html#heatmap",
    "href": "posts/assignment-5/index.html#heatmap",
    "title": "ASSIGNMENT 5: Happy Hockey",
    "section": "HEATMAP?",
    "text": "HEATMAP?\nCould this be useful?\n\n\nCode\nround1<-NHLDraft%>%\n  filter(round==1)\n\nggplot(round1, aes(y = reorder(name, overall), x = postdraft, fill = NHLgames)) +\n  geom_tile() +\n  scale_fill_gradient(low = \"blue\", high = \"red\")\n\n\n\n\n\n\nSolution"
  },
  {
    "objectID": "posts/assignment-5/index.html#other-stuff-to-consider",
    "href": "posts/assignment-5/index.html#other-stuff-to-consider",
    "title": "ASSIGNMENT 5: Happy Hockey",
    "section": "OTHER STUFF TO CONSIDER",
    "text": "OTHER STUFF TO CONSIDER\n\nDo these visualizations change as a function of player position?\nIs the number of NHL games played really the best metric to use?\n\n\nSolution\n\nSome visualizations considered the position of the players, e.g. Fig 3.1, 3.2. Therefore the scatters will change subject to the change in position data. But some other visualization grouped the position values in a round, therefore the change won’t reflected in the results of visualization.\nThe NHL games and totgames share the same tendency that the players with prior round tend to have more games. NHL games as a more competitive game can stand for a better performance of a player, but this value can be very limited in the early years for a young play. In that situation, the totgames would be a better choice to delineate the value of early-career players."
  },
  {
    "objectID": "posts/assignment-5/index.html#conclusion",
    "href": "posts/assignment-5/index.html#conclusion",
    "title": "ASSIGNMENT 5: Happy Hockey",
    "section": "CONCLUSION",
    "text": "CONCLUSION\nBased on your visualizations, what would you advise regarding this trade proposal? Why?\n\nSolution"
  },
  {
    "objectID": "posts/assignment-5/index.html#solution",
    "href": "posts/assignment-5/index.html#solution",
    "title": "ASSIGNMENT 5: Happy Hockey",
    "section": "Solution:",
    "text": "Solution:\n\n\nCode\nggplot(draft2022, aes(x=as.factor(round), fill = factor(NHLgames))) +\n  geom_bar(position = \"stack\", stat = \"count\")+\n  geom_text(aes(label = paste0(\"n=\", after_stat(count))), stat='count', position = position_stack(vjust = 0.5)) +\n  theme_classic()+ \n  labs(title = \"Fig 1. The # of games after a player been drafted\",\n              subtitle = \"Channel: Length, Mark: Bars\",\n              caption = \"The draft year of 2022\")\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\nI don’t know how to adjust the y-axis according to the count instead of the scale from 0 to 1.\n\nSolution: changing the position of geom_bar from fill to stack."
  },
  {
    "objectID": "posts/assignment-5/index.html#solution-1",
    "href": "posts/assignment-5/index.html#solution-1",
    "title": "ASSIGNMENT 5: Happy Hockey",
    "section": "Solution",
    "text": "Solution\n\n\nCode\ndrafttot2018 <- transform(\n  drafttot2018, has_game = ifelse(totgames>0, TRUE, FALSE)\n)\nggplot(drafttot2018, aes(x=as.factor(round), fill = factor(has_game))) +\n  geom_bar(stat = \"count\",\n           #position = drafttot2018$NHLgames\n           position = \"stack\"\n           )+\n  geom_text(aes(label = paste0(factor(has_game))), stat='count', position = position_stack(vjust = 0.5)) +\n  labs(title = \"Fig 2.2 Games after a player been drafted for 6 seasons\",\n              subtitle = \"Channel: Length, Mark: Bars\",\n              caption = \"The draft year of 2018\")\n\n\n\n\n\n\n\nCode\nggplot(drafttot2018, aes(x=as.factor(round), fill = factor(totgames))) +\n  geom_bar(stat = \"count\",\n           #position = drafttot2018$NHLgames\n           position = \"fill\"\n           )+\n  geom_text(aes(label = paste0(totgames)), stat='count', position = position_fill(vjust = 0.5)) +\n  labs(title = \"Fig 2.1 Games after a player been drafted for 6 seasons\",\n              subtitle = \"Channel: Length, Mark: Bars\",\n              caption = \"The draft year of 2018\")"
  },
  {
    "objectID": "posts/assignment-5/index.html#solution-2",
    "href": "posts/assignment-5/index.html#solution-2",
    "title": "ASSIGNMENT 5: Happy Hockey",
    "section": "Solution",
    "text": "Solution\n\n\nCode\n# library(reshape2)\n# test_df <- melt(data.frame(drafttot2018$overall, drafttot2018$totgames)) %>%\n#   mutate(val_trimmed = case_when(\n#     drafttot2018$overall > 32 * 2 ~ 32 * 2,\n#     drafttot2018$overall < 32 ~ 32,\n#     T ~ drafttot2018$overall\n#   ))\n\ncols <- c(\"#1170AA\", \"#55AD89\", \"#EF6F6A\")\nggplot(subset(drafttot2018, round <= 3), aes(x=overall, y=totgames, color = factor(round)))+\n  geom_point()+\n  scale_color_manual(values = cols) +\n  scale_x_continuous(name =\"Position of the players\")+\n  labs(title = \"Fig 3.1 Total games for the players from first three round\",\n              subtitle = \"Channel: Position, Mark: Point\",\n              caption = \"The draft year of 2018\")\n\n\n\n\n\n\n\nCode\n# options(dplyr.summarise.inform = FALSE)\n# draft_postdraft_l6<-NHLDraft%>%\n#   filter(postdraft<6)\n# \n# drafttot_postdraft_l6<- draft_postdraft_l6%>%\n#   group_by(draftyear, playerId, round, overall, position, name)%>%\n#   summarise(totgames=sum(NHLgames))\n# \n# cols <- c(\"#1170AA\", \"#55AD89\", \"#EF6F6A\")\n# ggplot(subset(drafttot_postdraft_l6, round <= 3), aes(x=overall, y=totgames, shape = factor(round), color = factor(draftyear)))+\n#   geom_point()+\n#   #scale_color_manual(values = cols) +\n#   scale_x_continuous(name =\"Position of the players\")+\n#   labs(title = \"Fig 3.2 Games for first three round players (post draft < 6)\",\n#               subtitle = \"Channel: Position, Mark: Point\",\n#               caption = \"The draft years from 2000 to 2022\")\n\n\n\n\nCode\n# https://r-graph-gallery.com/histogram_several_group.html\n# http://www.sthda.com/english/wiki/wiki.php?id_contents=7904\nlibrary(viridis)\n\n\nLoading required package: viridisLite\n\n\nCode\n#library(forcats)\n\noptions(dplyr.summarise.inform = FALSE)\ndraft_postdraft_l6<-NHLDraft%>%\n  filter(postdraft<6)\n\ndrafttot_postdraft_l6<- draft_postdraft_l6%>%\n  group_by(draftyear, playerId, round, overall, position, name)%>%\n  summarise(totgames=sum(NHLgames))\n\nggplot(subset(drafttot_postdraft_l6, round <= 3), \n       aes(x=overall, y=totgames, color=factor(round))) + \n  geom_point() + \n  scale_fill_viridis(discrete=TRUE) +\n  scale_color_viridis(discrete=TRUE) +\n  xlab(\"\") +\n  ylab(\"totgames\") +\n  #facet_grid( ~ draftyear)\n  facet_wrap(~draftyear)+\n  scale_x_continuous(name =\"Position of the players\")+\n  labs(title = \"Fig 3.2 Games for first three round players (post draft < 6)\",\n              subtitle = \"Channel: Position, Mark: Point\",\n              caption = \"The draft years from 2000 to 2022\")\n\n\n\n\n\nCode\n# p <- data %>%\n#   #mutate(text = fct_reorder(draftyear, totgames)) %>%\n#   ggplot( aes(x=overall, color=factor(draftyear), fill=factor(draftyear))) +\n#     geom_histogram(alpha=0.6, binwidth = 5) +\n#     scale_fill_viridis(discrete=TRUE) +\n#     scale_color_viridis(discrete=TRUE) +\n#     #theme_ipsum() +\n#     # theme(\n#     #   legend.position=\"none\",\n#     #   panel.spacing = unit(0.1, \"lines\"),\n#     #   strip.text.x = element_text(size = 8)\n#     # ) +\n#     xlab(\"\") +\n#     ylab(\"totgames\") +\n#     facet_wrap(~draftyear)\n# p"
  },
  {
    "objectID": "posts/assignment-5/index.html#solution-3",
    "href": "posts/assignment-5/index.html#solution-3",
    "title": "ASSIGNMENT 5: Happy Hockey",
    "section": "Solution",
    "text": "Solution\n\n\nCode\ncols <- c(\"#1170AA\", \"#55AD89\", \"#EF6F6A\")\nggplot(subset(drafttot2018, round <= 3), aes(x=overall, y=totgames, color = factor(round)))+\n  geom_point()+\n  geom_smooth()+\n  scale_color_manual(values = cols) +\n  scale_x_continuous(name =\"Position of the players\")+\n  labs(title = \"Fig 3.1 Total games for the players from first three round\",\n              subtitle = \"Channel: Position, Mark: Point, Line\",\n              caption = \"The draft year of 2018\")\n\n\n`geom_smooth()` using method = 'loess' and formula 'y ~ x'"
  },
  {
    "objectID": "posts/assignment-5/index.html#solution-4",
    "href": "posts/assignment-5/index.html#solution-4",
    "title": "ASSIGNMENT 5: Happy Hockey",
    "section": "Solution",
    "text": "Solution\n\n\nCode\ndrafttot2018_sorted  <- drafttot2018[order(drafttot2018$round), ]\n\ncolor_palette <- viridis(length(unique(drafttot2018_sorted$round)))\n\nplot <- plot_ly(drafttot2018_sorted, x = ~name, y = ~totgames, type = \"bar\", color = ~as.factor(round),\n                colors = color_palette)\nplot <- plot %>%\n  layout(xaxis = list(type = \"category\", automargin = TRUE),\n         margin = list(l = 100),\n         title = list(text = paste0('Fig 4.1 Total games for the players',\n                                    '<br>',\n                                    '<sup>',\n                                    'Channel: Position, Mark: Point, Line',\n                                    '</sup>')),\n         annotations = \n           list(x = 1, y = -0.1, text = \"The draft year of 2018\", \n                showarrow = F, xref='paper', yref='paper', \n                xanchor='right', yanchor='auto', xshift=0, yshift=-100,\n                font=list(size=15, color=\"black\")))%>%\n  config(scrollZoom = TRUE)%>%\n  layout(xaxis = list(categoryorder = \"array\", categoryarray = drafttot2018_sorted$name))\n\nggplotly(plot)\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nI tried to suppress the warning messages here by suppressWarnings() but failed."
  },
  {
    "objectID": "posts/assignment-5/index.html#solution-5",
    "href": "posts/assignment-5/index.html#solution-5",
    "title": "ASSIGNMENT 5: Happy Hockey",
    "section": "Solution",
    "text": "Solution\n\n\nCode\nggplot(draft2018, aes(x = as.factor(postdraft), y=NHLgames, fill=factor(round, levels = rev(unique(round)))))+\n  geom_col(position = \"stack\")+\n  scale_fill_viridis(discrete = TRUE, direction = -1)+\nlabs(title = \"Fig 5.1 NHLgames for the players according to postdraft\",\n     subtitle = \"Channel: Length, Color, Mark: Line\",\n     caption = \"The draft year of 2018\")\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nI don’t quite understand the question: > Do we really only want data from the 2018 draft class?\nDo you mean we should plot other stacked charts with different x-axis?\n\n\n\n\nCode\nggplot(draft2018, aes(x = as.factor(pickinRound), y=NHLgames, fill=factor(round, levels = rev(unique(round)))))+\n  geom_col(position = \"stack\")+\n  scale_fill_viridis(discrete = TRUE, direction = -1)+\nlabs(title = \"Fig 5.2 NHLgames for the players according to pickinRound\",\n     subtitle = \"Channel: Length, Color, Mark: Line\",\n     caption = \"The draft year of 2018\")"
  }
]