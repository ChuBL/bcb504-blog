sub = "Channel: Length, Marks: Lines",
# vertex.size.legend = list(title = "Usage%", labels = c("Low", "High")),
# vertex.color.legend = list(title = "Usage%", at = seq(0, 1, length.out = length(cols)), labels = NULL),
# edge.width.legend = list(title = "Weight", at = seq(0, 1, length.out = 5), labels = NULL)
)
# Create a data frame with the names and weights of the teammates
teammates <- data.frame(
from = rep("Flutter Mane", times = 11),
to = c("Iron Bundle", "Great Tusk", "Iron Hands", "Arcanine", "Amoonguss", "Kingambit", "Dondozo", "Dragonite", "Talonflame", "Tatsugiri", "Roaring Moon"),
weight = c(37.840, 29.509, 27.440, 23.847, 23.497, 19.474, 17.338, 17.326, 16.669, 16.646, 14.669)
)
# Create a graph object
g <- graph_from_data_frame(teammates, directed = TRUE)
# Set the vertex attributes
V(g)$label <- V(g)$name
V(g)$size <- top_20_pokemon$`Usage%` * 1000
# Set the edge attributes
E(g)$width <- 1/100 * E(g)$weight
# set size of nodes based on Usage% from top_20_pokemon
size <- top_20_pokemon$`Usage%` * 1000
# color nodes based on Usage%
cols <- colorRampPalette(c("blue", "red"))(length(size))
cols <- cols[rank(rank(size))]
# # Add the size legend
# legend("bottomright",
#        legend = c("Usage%"),
#        cex = 0.8,
#        pt.cex = 2,
#        pt.bg = "white",
#        pch = 21,
#        pt.col = "black",
#        bty = "n",
#        title = "Node Size")
#
# # Add the color legend
# legend("bottomleft",
#        legend = c("Low Usage", "High Usage"),
#        fill = colorRampPalette(c("blue", "red"))(10),
#        bty = "n",
#        title = "Node Color")
# Plot the graph with captions and legends
plot(g, vertex.label.color = "black", vertex.color = cols, edge.color = "gray",
main = "Pokemon Teammates Network for Flutter Mane",
sub = "Channel: Length, Marks: Lines",
# vertex.size.legend = list(title = "Usage%", labels = c("Low", "High")),
# vertex.color.legend = list(title = "Usage%", at = seq(0, 1, length.out = length(cols)), labels = NULL),
# edge.width.legend = list(title = "Weight", at = seq(0, 1, length.out = 5), labels = NULL)
)
# Create a data frame with the names and weights of the teammates
teammates <- data.frame(
from = rep("Flutter Mane", times = 11),
to = c("Iron Bundle", "Great Tusk", "Iron Hands", "Arcanine", "Amoonguss", "Kingambit", "Dondozo", "Dragonite", "Talonflame", "Tatsugiri", "Roaring Moon"),
weight = c(37.840, 29.509, 27.440, 23.847, 23.497, 19.474, 17.338, 17.326, 16.669, 16.646, 14.669)
)
# Create a graph object
g <- graph_from_data_frame(teammates, directed = TRUE)
# Set the vertex attributes
V(g)$label <- V(g)$name
V(g)$size <- top_20_pokemon$`Usage%` * 1000
# Set the edge attributes
E(g)$width <- 1/100 * E(g)$weight
# set size of nodes based on Usage% from top_20_pokemon
size <- top_20_pokemon$`Usage%`
# color nodes based on Usage%
cols <- colorRampPalette(c("blue", "red"))(length(size))
cols <- cols[rank(rank(size))]
# # Add the size legend
# legend("bottomright",
#        legend = c("Usage%"),
#        cex = 0.8,
#        pt.cex = 2,
#        pt.bg = "white",
#        pch = 21,
#        pt.col = "black",
#        bty = "n",
#        title = "Node Size")
#
# # Add the color legend
# legend("bottomleft",
#        legend = c("Low Usage", "High Usage"),
#        fill = colorRampPalette(c("blue", "red"))(10),
#        bty = "n",
#        title = "Node Color")
# Plot the graph with captions and legends
plot(g, vertex.label.color = "black", vertex.color = cols, edge.color = "gray",
main = "Pokemon Teammates Network for Flutter Mane",
sub = "Channel: Length, Marks: Lines",
# vertex.size.legend = list(title = "Usage%", labels = c("Low", "High")),
# vertex.color.legend = list(title = "Usage%", at = seq(0, 1, length.out = length(cols)), labels = NULL),
# edge.width.legend = list(title = "Weight", at = seq(0, 1, length.out = 5), labels = NULL)
)
# Create a data frame with the names and weights of the teammates
teammates <- data.frame(
from = rep("Flutter Mane", times = 11),
to = c("Iron Bundle", "Great Tusk", "Iron Hands", "Arcanine", "Amoonguss", "Kingambit", "Dondozo", "Dragonite", "Talonflame", "Tatsugiri", "Roaring Moon"),
weight = c(37.840, 29.509, 27.440, 23.847, 23.497, 19.474, 17.338, 17.326, 16.669, 16.646, 14.669)
)
# Create a graph object
g <- graph_from_data_frame(teammates, directed = TRUE)
# Set the vertex attributes
V(g)$label <- V(g)$name
V(g)$size <- top_20_pokemon$`Usage%` * 1000
# Set the edge attributes
E(g)$width <- 1/100 * E(g)$weight
# set size of nodes based on Usage% from top_20_pokemon
size <- top_20_pokemon$`Usage%`/1000
# color nodes based on Usage%
cols <- colorRampPalette(c("blue", "red"))(length(size))
cols <- cols[rank(rank(size))]
# # Add the size legend
# legend("bottomright",
#        legend = c("Usage%"),
#        cex = 0.8,
#        pt.cex = 2,
#        pt.bg = "white",
#        pch = 21,
#        pt.col = "black",
#        bty = "n",
#        title = "Node Size")
#
# # Add the color legend
# legend("bottomleft",
#        legend = c("Low Usage", "High Usage"),
#        fill = colorRampPalette(c("blue", "red"))(10),
#        bty = "n",
#        title = "Node Color")
# Plot the graph with captions and legends
plot(g, vertex.label.color = "black", vertex.color = cols, edge.color = "gray",
main = "Pokemon Teammates Network for Flutter Mane",
sub = "Channel: Length, Marks: Lines",
# vertex.size.legend = list(title = "Usage%", labels = c("Low", "High")),
# vertex.color.legend = list(title = "Usage%", at = seq(0, 1, length.out = length(cols)), labels = NULL),
# edge.width.legend = list(title = "Weight", at = seq(0, 1, length.out = 5), labels = NULL)
)
# Create a data frame with the names and weights of the teammates
teammates <- data.frame(
from = rep("Flutter Mane", times = 11),
to = c("Iron Bundle", "Great Tusk", "Iron Hands", "Arcanine", "Amoonguss", "Kingambit", "Dondozo", "Dragonite", "Talonflame", "Tatsugiri", "Roaring Moon"),
weight = c(37.840, 29.509, 27.440, 23.847, 23.497, 19.474, 17.338, 17.326, 16.669, 16.646, 14.669)
)
# Create a graph object
g <- graph_from_data_frame(teammates, directed = TRUE)
# Set the vertex attributes
V(g)$label <- V(g)$name
V(g)$size <- 20
# Set the edge attributes
E(g)$width <- 1/100 * E(g)$weight
# set size of nodes based on Usage% from top_20_pokemon
size <- top_20_pokemon$`Usage%`/1000
# color nodes based on Usage%
cols <- colorRampPalette(c("blue", "red"))(length(size))
cols <- cols[rank(rank(size))]
# # Add the size legend
# legend("bottomright",
#        legend = c("Usage%"),
#        cex = 0.8,
#        pt.cex = 2,
#        pt.bg = "white",
#        pch = 21,
#        pt.col = "black",
#        bty = "n",
#        title = "Node Size")
#
# # Add the color legend
# legend("bottomleft",
#        legend = c("Low Usage", "High Usage"),
#        fill = colorRampPalette(c("blue", "red"))(10),
#        bty = "n",
#        title = "Node Color")
# Plot the graph with captions and legends
plot(g, vertex.label.color = "black", vertex.color = cols, edge.color = "gray",
main = "Pokemon Teammates Network for Flutter Mane",
sub = "Channel: Length, Marks: Lines",
# vertex.size.legend = list(title = "Usage%", labels = c("Low", "High")),
# vertex.color.legend = list(title = "Usage%", at = seq(0, 1, length.out = length(cols)), labels = NULL),
# edge.width.legend = list(title = "Weight", at = seq(0, 1, length.out = 5), labels = NULL)
)
library(tidyverse)
library(readxl)
library(rnaturalearth)
library(rnaturalearthdata)
library(dplyr)
Malaria <- read.csv("National_Unit_data.csv")
Incidence<- Malaria%>%
filter(Metric == "Infection Prevalence" & Year == "2019")%>%
mutate(Prevalence = Value)%>%
select(c(ISO3, Prevalence))
world_map <- ne_countries(scale = 'medium', returnclass = "sf")
map_data <- world_map %>%
left_join(Incidence, by = c("iso_a3" = "ISO3"))
View(map_data)
View(map_data)
ggplot() +
geom_sf(data = map_data%>%
filter(continent = "Africa")
, aes(fill = Prevalence)) +
scale_fill_gradient(low = "white", high = "red", na.value = "gray", name = "Malaria Prevalence") +
theme_minimal() +
theme(axis.text = element_blank(), axis.ticks = element_blank(), axis.title = element_blank()) +
labs(title = "Malaria Prevalence by Country")
ggplot() +
geom_sf(data = map_data%>%
filter(continent = "Africa"),
aes(fill = Prevalence)) +
scale_fill_gradient(low = "white", high = "red", na.value = "gray", name = "Malaria Prevalence") +
theme_minimal() +
theme(axis.text = element_blank(), axis.ticks = element_blank(), axis.title = element_blank()) +
labs(title = "Malaria Prevalence by Country")
ggplot() +
geom_sf(data = map_data%>%
filter(continent == "Africa"),
aes(fill = Prevalence)) +
scale_fill_gradient(low = "white", high = "red", na.value = "gray", name = "Malaria Prevalence") +
theme_minimal() +
theme(axis.text = element_blank(), axis.ticks = element_blank(), axis.title = element_blank()) +
labs(title = "Malaria Prevalence by Country")
library(tidyverse)
library(readxl)
library(rnaturalearth)
library(rnaturalearthdata)
library(dplyr)
library(gganimate)
library(transformr)
Malaria <- read.csv("National_Unit_data.csv")
Incidence <- Malaria %>%
filter(Metric == "Infection Prevalence" & Year >= 2010 & Year <= 2020) %>%
mutate(Year = as.factor(Year),
Prevalence = Value)
world_map <- ne_countries(scale = "medium", returnclass = "sf")
map_data <- world_map %>%
left_join(Incidence, by = c("iso_a3" = "ISO3"))
p <- ggplot() +
geom_sf(data = map_data, aes(fill = Prevalence)) +
scale_fill_gradient(low = "white", high = "red", na.value = "gray", name = "Malaria Prevalence") +
theme_minimal() +
theme(axis.text = element_blank(), axis.ticks = element_blank(), axis.title = element_blank()) +
labs(title = "Malaria Prevalence by Country") +
transition_states(Year, transition_length = 2, state_length = 2)
animate(p, fps = 25, width = 800, height = 500)
library(tidyverse)
library(readxl)
library(rnaturalearth)
library(rnaturalearthdata)
library(dplyr)
library(gganimate)
library(transformr)
Malaria <- read.csv("National_Unit_data.csv")
Incidence <- Malaria %>%
filter(Metric == "Infection Prevalence" & Year >= 2010 & Year <= 2020) %>%
mutate(Year = as.factor(Year),
Prevalence = Value)
world_map <- ne_countries(scale = "medium", returnclass = "sf")
map_data <- world_map %>%
left_join(Incidence, by = c("iso_a3" = "ISO3"))
p <- ggplot() +
geom_sf(data = map_data%>%
filter(continent == "Africa"),
aes(fill = Prevalence)) +
scale_fill_gradient(low = "white", high = "red", na.value = "gray", name = "Malaria Prevalence") +
theme_minimal() +
theme(axis.text = element_blank(), axis.ticks = element_blank(), axis.title = element_blank()) +
labs(title = "Malaria Prevalence by Country") +
transition_states(Year, transition_length = 2, state_length = 2)
animate(p, fps = 25, width = 800, height = 500)
sessionInfo()["packages"]
library(tidyverse)
library(readxl)
library(rnaturalearth)
library(rnaturalearthdata)
library(dplyr)
library(gganimate)
library(transformr)
Malaria <- read.csv("National_Unit_data.csv")
Incidence <- Malaria %>%
filter(Metric == "Infection Prevalence" & Year >= 2010 & Year <= 2020) %>%
mutate(Year = as.factor(Year),
Prevalence = Value)
world_map <- ne_countries(scale = "medium", returnclass = "sf")
map_data <- world_map %>%
left_join(Incidence, by = c("iso_a3" = "ISO3"))
p <- ggplot() +
geom_sf(data = map_data%>%
filter(continent == "Africa"),
aes(fill = Prevalence)) +
scale_fill_gradient(low = "white", high = "red", na.value = "gray", name = "Malaria Prevalence") +
theme_minimal() +
theme(axis.text = element_blank(), axis.ticks = element_blank(), axis.title = element_blank()) +
labs(title = "Malaria Prevalence by Country") +
transition_states(Year, transition_length = 2, state_length = 2)
animate(p, fps = 25, width = 800, height = 500)
sessionInfo()["packages"]
library(tidyverse)
library(readxl)
library(rnaturalearth)
library(rnaturalearthdata)
library(dplyr)
library(gganimate)
library(transformr)
Malaria <- read.csv("National_Unit_data.csv")
Incidence <- Malaria %>%
filter(Metric == "Infection Prevalence" & Year >= 2010 & Year <= 2020) %>%
mutate(Year = as.factor(Year),
Prevalence = Value)
world_map <- ne_countries(scale = "medium", returnclass = "sf")
map_data <- world_map %>%
left_join(Incidence, by = c("iso_a3" = "ISO3"))
p <- ggplot() +
geom_sf(data = map_data%>%
filter(continent == "Africa"),
aes(fill = Prevalence)) +
scale_fill_gradient(low = "white", high = "red", na.value = "gray", name = "Malaria Prevalence") +
theme_minimal() +
theme(axis.text = element_blank(), axis.ticks = element_blank(), axis.title = element_blank()) +
labs(title = "Malaria Prevalence by Country") +
transition_states(Year, transition_length = 2, state_length = 2)
animate(p, fps = 25, width = 800, height = 500)
sessionInfo()["packages"]
library(tidyverse)
library(readxl)
library(rnaturalearth)
library(rnaturalearthdata)
library(dplyr)
library(gganimate)
library(transformr)
Malaria <- read.csv("National_Unit_data.csv")
Incidence <- Malaria %>%
filter(Metric == "Infection Prevalence" & Year >= 2010 & Year <= 2020) %>%
mutate(Year = as.factor(Year),
Prevalence = Value)
world_map <- ne_countries(scale = "medium", returnclass = "sf")
map_data <- world_map %>%
left_join(Incidence, by = c("iso_a3" = "ISO3"))
p <- ggplot() +
geom_sf(data = map_data%>%
filter(continent == "Africa"),
aes(fill = Prevalence)) +
scale_fill_gradient(low = "white", high = "red", na.value = "gray", name = "Malaria Prevalence") +
theme_minimal() +
theme(axis.text = element_blank(), axis.ticks = element_blank(), axis.title = element_blank()) +
labs(title = "Malaria Prevalence by Country") +
transition_states(Year, transition_length = 2, state_length = 2)
sessionInfo()["packages"]
animate(p, fps = 25, width = 800, height = 500)
packageStatus()
library(tidyverse)
library(readxl)
library(rnaturalearth)
library(rnaturalearthdata)
library(dplyr)
library(gganimate)
library(transformr)
Malaria <- read.csv("National_Unit_data.csv")
Incidence <- Malaria %>%
filter(Metric == "Infection Prevalence" & Year >= 2010 & Year <= 2020) %>%
mutate(Year = as.factor(Year),
Prevalence = Value)
world_map <- ne_countries(scale = "medium", returnclass = "sf")
map_data <- world_map %>%
left_join(Incidence, by = c("iso_a3" = "ISO3"))
p <- ggplot() +
geom_sf(data = map_data%>%
filter(continent == "Africa"),
aes(fill = Prevalence)) +
scale_fill_gradient(low = "white", high = "red", na.value = "gray", name = "Malaria Prevalence") +
theme_minimal() +
theme(axis.text = element_blank(), axis.ticks = element_blank(), axis.title = element_blank()) +
labs(title = "Malaria Prevalence by Country") +
transition_states(Year, transition_length = 2, state_length = 2)
animate(p, fps = 25, width = 800, height = 500)
library(tidyverse)
library(readxl)
library(rnaturalearth)
library(rnaturalearthdata)
library(dplyr)
library(gganimate)
library(transformr)
Malaria <- read.csv("National_Unit_data.csv")
Incidence <- Malaria %>%
filter(Metric == "Infection Prevalence" & Year >= 2010 & Year <= 2020) %>%
mutate(Year = as.factor(Year),
Prevalence = Value)
world_map <- ne_countries(scale = "medium", returnclass = "sf")
map_data <- world_map %>%
left_join(Incidence, by = c("iso_a3" = "ISO3"))
p <- ggplot() +
geom_sf(data = map_data%>%
filter(continent == "Africa"),
aes(fill = Prevalence)) +
scale_fill_gradient(low = "white", high = "red", na.value = "gray", name = "Malaria Prevalence") +
theme_minimal() +
theme(axis.text = element_blank(), axis.ticks = element_blank(), axis.title = element_blank()) +
labs(title = "Malaria Prevalence by Country") +
transition_states(Year, transition_length = 2, state_length = 2)
animate(p, fps = 25, width = 800, height = 500)
library(tidyverse)
library(readxl)
library(rnaturalearth)
library(rnaturalearthdata)
library(dplyr)
library(gganimate)
library(transformr)
Malaria <- read.csv("National_Unit_data.csv")
Incidence <- Malaria %>%
filter(Metric == "Infection Prevalence" & Year >= 2010 & Year <= 2020) %>%
mutate(Year = as.factor(Year),
Prevalence = Value)
world_map <- ne_countries(scale = "medium", returnclass = "sf")
map_data <- world_map %>%
left_join(Incidence, by = c("iso_a3" = "ISO3"))
p <- ggplot() +
geom_sf(data = map_data%>%
filter(continent == "Africa"),
aes(fill = Prevalence)) +
scale_fill_gradient(low = "white", high = "red", na.value = "gray", name = "Malaria Prevalence") +
theme_minimal() +
theme(axis.text = element_blank(), axis.ticks = element_blank(), axis.title = element_blank()) +
labs(title = "Malaria Prevalence by Country") +
transition_states(Year, transition_length = 2, state_length = 2)
animate(p, fps = 25, width = 800, height = 500)
library(gganimate)
library(transformr)
library(magick)
library(gganimate)
library(transformr)
# library(magick)
library(gifski)
library(tidyverse)
library(readxl)
library(rnaturalearth)
library(rnaturalearthdata)
library(dplyr)
Malaria <- read.csv("National_Unit_data.csv")
library(gganimate)
library(transformr)
# library(magick)
library(gifski)
library(tidyverse)
library(readxl)
library(rnaturalearth)
library(rnaturalearthdata)
library(dplyr)
Malaria <- read.csv("National_Unit_data.csv")
pwd()
library(gganimate)
library(transformr)
# library(magick)
library(gifski)
library(tidyverse)
library(readxl)
library(rnaturalearth)
library(rnaturalearthdata)
library(dplyr)
Malaria <- read.csv("/Users/blc/rspace/semester/bcb504/blog/bcb504-blog/posts/Practice-with-Spatial-Data/National_Unit_data.csv")
Incidence<- Malaria%>%
filter(Metric == "Infection Prevalence")%>%
mutate(Prevalence = Value, Year = as.factor(Year))
world_map <- ne_countries(scale = "medium", returnclass = "sf")
map_data <- world_map %>%
left_join(Incidence, by = c("iso_a3" = "ISO3"))
ggplot() +
geom_sf(data = map_data%>%
filter(continent=="Africa"),
aes(fill = Prevalence)) +
scale_fill_gradient(low = "white", high = "red", na.value = "gray", name = "Malaria Prevalence") +
theme_minimal() +
theme(axis.text = element_blank(), axis.ticks = element_blank(), axis.title = element_blank()) +
labs(title = "Malaria Prevalence by Country")
p <- ggplot() +
geom_sf(data = map_data%>%
filter(continent=="Africa"),
aes(fill = Prevalence)) +
scale_fill_gradient(low = "white", high = "red", na.value = "gray", name = "Malaria Prevalence") +
theme_minimal() +
theme(axis.text = element_blank(), axis.ticks = element_blank(), axis.title = element_blank()) +
labs(title = "Malaria Prevalence by Country") +
transition_states(Year, transition_length = 2, state_length = 2)
animate(p, fps = 25, width = 800, height = 500)
library(gganimate)
library(transformr)
# library(magick)
library(gifski)
library(tidyverse)
library(readxl)
library(rnaturalearth)
library(rnaturalearthdata)
library(dplyr)
setwd("/Users/blc/rspace/semester/bcb504/blog/bcb504-blog/posts/Practice-with-Spatial-Data/")
Malaria <- read.csv("National_Unit_data.csv")
Incidence<- Malaria%>%
filter(Metric == "Infection Prevalence")%>%
mutate(Prevalence = Value, Year = as.factor(Year))
world_map <- ne_countries(scale = "medium", returnclass = "sf")
map_data <- world_map %>%
left_join(Incidence, by = c("iso_a3" = "ISO3"))
ggplot() +
geom_sf(data = map_data%>%
filter(continent=="Africa"),
aes(fill = Prevalence)) +
scale_fill_gradient(low = "white", high = "red", na.value = "gray", name = "Malaria Prevalence") +
theme_minimal() +
theme(axis.text = element_blank(), axis.ticks = element_blank(), axis.title = element_blank()) +
labs(title = "Malaria Prevalence by Country")
p <- ggplot() +
geom_sf(data = map_data%>%
filter(continent=="Africa"),
aes(fill = Prevalence)) +
scale_fill_gradient(low = "white", high = "red", na.value = "gray", name = "Malaria Prevalence") +
theme_minimal() +
theme(axis.text = element_blank(), axis.ticks = element_blank(), axis.title = element_blank()) +
labs(title = "Malaria Prevalence by Country") +
transition_states(Year, transition_length = 2, state_length = 2)
animate(p, fps = 25, width = 800, height = 500)
