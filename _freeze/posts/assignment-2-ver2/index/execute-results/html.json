{
  "hash": "edf4d0384946e7877dbaaa384e1c807c",
  "result": {
    "markdown": "---\ntitle: \"Assignment 2: Your Data Ver2.0\"\nauthor: \"Jiyin Zhang\"\nsubtitle: \"Describing the dataset\"\ndate: \"2023-02-07\"\nformat: html\n---\n\n\n## MY DATASET\n\nThis dataset is generated based on the elements coexistence counts from Mindat.org database. The original data source is retrieved via Mindat API and stored in JSON format. Then after data pre-process and data cleaning steps, the retrieved data is cured and stored in CSV format. The dataset can be accessed at the [Github repository](https://github.com/ChuBL/BCB-504-Foundations-of-Data-Visualization/tree/main/assg%232), in the name of **mineral.csv**.\n\n<!-- ::: callout-note -->\n\n<!-- The CSV file of dataset is a concatenated version of 72 separate spread sheets of element triplets coexistence values. Each spread sheet has 2 + 72 columns, the first column indicates the background element, which should remain the same throughout each separate sheet. The second column records the second dimension of the element triplets Then the third dimension of elements are listed by the remaining columns. The value of cell $(i, j)$ indicating the coexistence amount of three elements: the first two elements in $(i, 0)$ and $(i, 1)$, and the third element in $(0, j)$. -->\n\n<!-- ::: -->\n\n### Data Collection\n\nThe dataset was retrieved via Mindat API as a JSON file. In the data preprocessing step, the elements information are extracted in a new JSON file, in which some of the hierarchical structures have been removed in convenience of python's `to_csv` function. Then the exported csv file can be read directly with R's `read.csv` function.\n\n## IMPORTING THE DATA\n\nI'm going to use the built-in `read.csv` package to import CSV file.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Code\"}\nlibrary(tidyverse)\n# result <- read.csv(file = 'total_elements_mindat.csv')\nresult <- read.csv(file = 'mineral.csv')\n```\n:::\n\n\nThe `glimpse` command in the `Tidyverse` package is a nice way to summarize the data frame:\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Code\"}\nglimpse(result)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 5,883\nColumns: 17\n$ id              <int> 1, 2, 3, 4, 9, 10, 13, 14, 18, 19, 21, 23, 27, 31, 32,…\n$ name            <chr> \"Abelsonite\", \"Abenakiite-(Ce)\", \"Abernathyite\", \"Abhu…\n$ elements        <chr> \"-Ni-N-C-H-\", \"-Ce-Na-Si-O-P-C-S-\", \"-As-O-K-H-U-\", \"-…\n$ sigelements     <chr> \"-Ni-N-C-H-\", \"-Ce-Na-Si-O-P-C-S-\", \"-As-O-K-H-U-\", \"-…\n$ yeardiscovery   <chr> \"1975\", \"\", \"1956\", \"1983\", \"1990\", \"1855\", \"1974\", \"1…\n$ hmin            <dbl> 2.0, 4.0, 2.5, 2.0, 6.5, 2.0, 1.0, 2.5, 5.0, 3.5, 3.5,…\n$ hmax            <dbl> 3.0, 5.0, 3.0, 2.0, 6.5, 2.5, 1.5, 2.5, 6.0, 3.5, 3.5,…\n$ hardtype        <int> 0, 0, 0, 3, 0, 3, 0, 0, 3, 0, 3, 0, 0, 0, 0, 0, 0, 0, …\n$ specificgravity <chr> \"1.4\", \"3.21\", \"\", \"4.29\", \"\", \"7.24 (calc)  7.2-7.4(m…\n$ strunz10ed1     <int> 10, 9, 8, 3, 9, 2, 10, 2, 9, 3, 8, 8, 6, 9, 9, 9, 9, 8…\n$ strunz10ed2     <chr> \"C\", \"C\", \"E\", \"D\", \"A\", \"B\", \"A\", \"C\", \"D\", \"C\", \"B\",…\n$ strunz10ed3     <chr> \"A\", \"K\", \"B\", \"A\", \"G\", \"A\", \"A\", \"C\", \"E\", \"C\", \"B\",…\n$ strunz10ed4     <chr> \"20\", \"10\", \"15\", \"30\", \"05\", \"35\", \"20\", \"05\", \"10\", …\n$ dana8ed1        <chr> \"50\", \"61\", \"40\", \"10\", \"7\", \"2\", \"50\", \"0\", \"0\", \"11\"…\n$ dana8ed2        <chr> \"4\", \"4\", \"2a\", \"5\", \"5\", \"4\", \"4\", \"0\", \"0\", \"6\", \"6\"…\n$ dana8ed3        <chr> \"9\", \"1\", \"9\", \"9\", \"1\", \"1\", \"7\", \"0\", \"0\", \"17\", \"6\"…\n$ dana8ed4        <chr> \"1\", \"1\", \"1\", \"1\", \"4\", \"1\", \"1\", \"0\", \"0\", \"1\", \"3\",…\n```\n:::\n:::\n\n\n## DESCRIBE THE DATA\n\n### Data Set Type\n\nThe dataset is stored as a great **Flat Table**, the items are 5883 mineral species from OpenMindat data server, and the columns representing the corresponding attributes.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Mineral Species Attributes\"}\nc('id', 'name', 'elements', 'sigelements', 'yeardiscovery', 'hmin', 'hmax', 'hardtype', 'specificgravity', 'strunz10ed1', 'strunz10ed2', 'strunz10ed3', 'strunz10ed4', 'dana8ed1', 'dana8ed2', 'dana8ed3', 'dana8ed4')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] \"id\"              \"name\"            \"elements\"        \"sigelements\"    \n [5] \"yeardiscovery\"   \"hmin\"            \"hmax\"            \"hardtype\"       \n [9] \"specificgravity\" \"strunz10ed1\"     \"strunz10ed2\"     \"strunz10ed3\"    \n[13] \"strunz10ed4\"     \"dana8ed1\"        \"dana8ed2\"        \"dana8ed3\"       \n[17] \"dana8ed4\"       \n```\n:::\n:::\n\n\n### Attribute Types\n\nThe attributes of the data are recorded in a 2-dimensional format, therefore the data frame rows will looks similar to the result of `glimpse` function. The 'id' field is in a strict ascending order, while not continuous. The 'id' field of each row is determined by the website managers or data providers, therefore it has nothing to do with some standard identifications. The 'names' field indicates the IMA approved mineral species names. The 'elements' and 'sigelements' fields indicating the elements of the mineral chemical formual, while the 'sigelement' is determined by some significant elements as a subset of 'elements'. In compatable with csv format, the elements in this field are separated by hyphens $-$.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Code\"}\nhead(result)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  id            name           elements        sigelements yeardiscovery hmin\n1  1      Abelsonite         -Ni-N-C-H-         -Ni-N-C-H-          1975  2.0\n2  2 Abenakiite-(Ce) -Ce-Na-Si-O-P-C-S- -Ce-Na-Si-O-P-C-S-                4.0\n3  3    Abernathyite       -As-O-K-H-U-       -As-O-K-H-U-          1956  2.5\n4  4        Abhurite        -Cl-Sn-O-H-        -Cl-Sn-O-H-          1983  2.0\n5  9  Abswurmbachite       -Cu-Mn-Si-O-       -Cu-Mn-Si-O-          1990  6.5\n6 10       Acanthite             -Ag-S-             -Ag-S-          1855  2.0\n  hmax hardtype            specificgravity strunz10ed1 strunz10ed2 strunz10ed3\n1  3.0        0                        1.4          10           C           A\n2  5.0        0                       3.21           9           C           K\n3  3.0        0                                      8           E           B\n4  2.0        3                       4.29           3           D           A\n5  6.5        0                                      9           A           G\n6  2.5        3 7.24 (calc)  7.2-7.4(meas)           2           B           A\n  strunz10ed4 dana8ed1 dana8ed2 dana8ed3 dana8ed4\n1          20       50        4        9        1\n2          10       61        4        1        1\n3          15       40       2a        9        1\n4          30       10        5        9        1\n5          05        7        5        1        4\n6          35        2        4        1        1\n```\n:::\n:::\n\n\n## Visualization\n\n### The correaltion between elements and hardness\n\n\n::: {.cell}\n\n```{.r .cell-code}\nElements <- c('H', 'Li', 'Be', 'B', 'C', 'N', 'O', 'F', 'Na', 'Mg', 'Al', 'Si', 'P', 'S', 'Cl', 'K', 'Ca', 'Sc', 'Ti', 'V', 'Cr', 'Mn', 'Fe', 'Co', 'Ni', 'Cu', 'Zn', 'Ga', 'Ge', 'As', 'Se', 'Br', 'Rb', 'Sr', 'Y', 'Zr', 'Nb', 'Mo', 'Ru', 'Rh', 'Pd', 'Ag', 'Cd', 'In', 'Sn', 'Sb', 'Te', 'I', 'Cs', 'Ba', 'La', 'Ce', 'Nd', 'Sm', 'Gd', 'Dy', 'Er', 'Yb', 'Hf', 'Ta', 'W', 'Re', 'Os', 'Ir', 'Pt', 'Au', 'Hg', 'Tl', 'Pb', 'Bi', 'Th', 'U')\nlibrary(\"tidyverse\")\n\ndf <- data.frame(Elements)\ndf1 <- df %>%\n  add_column(hmin = NA, hmin_mineral = NA, hmax = NA, hmax_mineral = NA, hmean = NA)\n\n# for (row in 1:nrow(result)) {\n#     mineral_name <- result[row, \"name\"]\n#     elements <- str_extract_all(\n#       result[row, \"elements\"], regex(\"(?<=-)[A-Z]+[a-z]*(?=-)\")\n#       )\n# \n#     hmin <- result[row, \"hmin\"]\n#     for (element in elements){\n#         comparing_hmin <- df1[df1$Elements == element, 'hmin']\n#         if (is.na(comparing_hmin)){\n#           df1[df1$Elements == element, 'hmin'] <- hmin\n#         }\n#     }\n#     # hmax <- result[row, \"hmax\"]\n# }\n\nprint(df1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   Elements hmin hmin_mineral hmax hmax_mineral hmean\n1         H   NA           NA   NA           NA    NA\n2        Li   NA           NA   NA           NA    NA\n3        Be   NA           NA   NA           NA    NA\n4         B   NA           NA   NA           NA    NA\n5         C   NA           NA   NA           NA    NA\n6         N   NA           NA   NA           NA    NA\n7         O   NA           NA   NA           NA    NA\n8         F   NA           NA   NA           NA    NA\n9        Na   NA           NA   NA           NA    NA\n10       Mg   NA           NA   NA           NA    NA\n11       Al   NA           NA   NA           NA    NA\n12       Si   NA           NA   NA           NA    NA\n13        P   NA           NA   NA           NA    NA\n14        S   NA           NA   NA           NA    NA\n15       Cl   NA           NA   NA           NA    NA\n16        K   NA           NA   NA           NA    NA\n17       Ca   NA           NA   NA           NA    NA\n18       Sc   NA           NA   NA           NA    NA\n19       Ti   NA           NA   NA           NA    NA\n20        V   NA           NA   NA           NA    NA\n21       Cr   NA           NA   NA           NA    NA\n22       Mn   NA           NA   NA           NA    NA\n23       Fe   NA           NA   NA           NA    NA\n24       Co   NA           NA   NA           NA    NA\n25       Ni   NA           NA   NA           NA    NA\n26       Cu   NA           NA   NA           NA    NA\n27       Zn   NA           NA   NA           NA    NA\n28       Ga   NA           NA   NA           NA    NA\n29       Ge   NA           NA   NA           NA    NA\n30       As   NA           NA   NA           NA    NA\n31       Se   NA           NA   NA           NA    NA\n32       Br   NA           NA   NA           NA    NA\n33       Rb   NA           NA   NA           NA    NA\n34       Sr   NA           NA   NA           NA    NA\n35        Y   NA           NA   NA           NA    NA\n36       Zr   NA           NA   NA           NA    NA\n37       Nb   NA           NA   NA           NA    NA\n38       Mo   NA           NA   NA           NA    NA\n39       Ru   NA           NA   NA           NA    NA\n40       Rh   NA           NA   NA           NA    NA\n41       Pd   NA           NA   NA           NA    NA\n42       Ag   NA           NA   NA           NA    NA\n43       Cd   NA           NA   NA           NA    NA\n44       In   NA           NA   NA           NA    NA\n45       Sn   NA           NA   NA           NA    NA\n46       Sb   NA           NA   NA           NA    NA\n47       Te   NA           NA   NA           NA    NA\n48        I   NA           NA   NA           NA    NA\n49       Cs   NA           NA   NA           NA    NA\n50       Ba   NA           NA   NA           NA    NA\n51       La   NA           NA   NA           NA    NA\n52       Ce   NA           NA   NA           NA    NA\n53       Nd   NA           NA   NA           NA    NA\n54       Sm   NA           NA   NA           NA    NA\n55       Gd   NA           NA   NA           NA    NA\n56       Dy   NA           NA   NA           NA    NA\n57       Er   NA           NA   NA           NA    NA\n58       Yb   NA           NA   NA           NA    NA\n59       Hf   NA           NA   NA           NA    NA\n60       Ta   NA           NA   NA           NA    NA\n61        W   NA           NA   NA           NA    NA\n62       Re   NA           NA   NA           NA    NA\n63       Os   NA           NA   NA           NA    NA\n64       Ir   NA           NA   NA           NA    NA\n65       Pt   NA           NA   NA           NA    NA\n66       Au   NA           NA   NA           NA    NA\n67       Hg   NA           NA   NA           NA    NA\n68       Tl   NA           NA   NA           NA    NA\n69       Pb   NA           NA   NA           NA    NA\n70       Bi   NA           NA   NA           NA    NA\n71       Th   NA           NA   NA           NA    NA\n72        U   NA           NA   NA           NA    NA\n```\n:::\n\n```{.r .cell-code}\nprint(df1[df1$Elements == 'H', 'hmin'])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] NA\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ncomparing_hmin <- df1[df1$Elements == 'H', 'hmin']\nprint(comparing_hmin)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] NA\n```\n:::\n\n```{.r .cell-code}\nif (is.na(comparing_hmin)){\n  # df1[df1$Elements == element, 'hmin'] <- hmin\n  print('hello')\n}\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"hello\"\n```\n:::\n\n```{.r .cell-code}\nelements <- str_extract_all(\n      result[1, \"elements\"], regex(\"(?<=-)[A-Z]+[a-z]*(?=-)\")\n      )\nprint(elements)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[[1]]\n[1] \"Ni\" \"N\"  \"C\"  \"H\" \n```\n:::\n\n```{.r .cell-code}\n# for (element in elements){\n#   comparing_name <- df1[df1$Elements == element, 'Elements']\n#   #v comparing_hmin <- df1[df1$Elements == element, 'hmin']\n#   #print(element, sep = '\\n')\n#   print(comparing_name, sep = '\\n')\n#   #cat(comparing_hmin, sep = '\\n')\n# }\n\n\nprint(class(elements))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"list\"\n```\n:::\n\n```{.r .cell-code}\nfor (i in 1:length(elements)){\n  print(elements[i])\n  print('hello')\n  }\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[[1]]\n[1] \"Ni\" \"N\"  \"C\"  \"H\" \n\n[1] \"hello\"\n```\n:::\n\n```{.r .cell-code}\nfor (element in elements){\n  print(element)\n  print('hello')\n }\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Ni\" \"N\"  \"C\"  \"H\" \n[1] \"hello\"\n```\n:::\n\n```{.r .cell-code}\n# comparing_hmin <- df1[df1$Elements == 'H', 'hmin']\n# print(comparing_hmin)\n# print(class(comparing_hmin))\n# if (is.na(comparing_hmin)){\n#   print('test')\n# }\n\n\n# x <- c('-Ce-Na-Si-O-P-C-S-')\n# y <- str_extract_all(x, regex(\"(?<=-)[A-Z]+[a-z]*(?=-)\"))\n# for (item in y){\n#   cat(item, sep=\"\\n\")\n# }\n#   \n# \n# primes_list <- list(2, 3, 5, 7, 11, 13)\n\n# # loop version 1\n# for (p in primes_list) {\n#   print(p)\n# }\n```\n:::\n\n\n## Question\n\n::: callout-note\n<del>I have no idea why the render result of this `.qmd` file failed to adapt to the html style.</del>\n\nThe problem is that the `.qmd` file shall not consist of the hashtag \\# symbol.\n\nAnother issue fixed is that the json file is originally contains 5883 items, which should be converted into 5883 rows of csv items. While the converting results shows there were over 5900 rows. The reason for this problem is that there are some annoying `\\n`s in the attributes, which will end up with new rows in the exported csv file. I fixed this issue by simply removing all the `\\n`s in the json file.\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}