{
  "hash": "611c530078aac864e14cc155b830df14",
  "result": {
    "markdown": "---\ntitle: \"BCB 520 - Midterm Pokemon Portfolio Post\"\nauthor: \"Jiyin Zhang\"\nsubtitle: \"Road to Masters\"\ndate: \"2023-03-30\"\ncategories: [Assignment, DataViz, Smogon, Pokemon Showdown]\nimage: image_j28MHAY0_1680213973861_raw.jpeg\ncode-fold: true\ncode-tools: true\ndescription: \"Zapping Through the 10,000,000 Pokemon Battles\"\nformat: html\n---\n\n\n## Collect the data\n\n::: {.cell}\n\n```{.python .cell-code}\nimport os\nimport requests\nfrom lxml import html\nfrom pathlib import Path\nimport sys\n\nurl = \"https://www.smogon.com/stats/\"\ndata_dir = os.path.join(os.getcwd(), \"data\")\n\ndef download_files(url, dir_path=data_dir):\n    # use pathlib to create the directory whether the parent directory exists or not\n    Path(dir_path).mkdir(parents=True, exist_ok=True)\n\n    response = requests.get(url)\n    parsed_body = html.fromstring(response.content)\n\n    for index in range(1, 65535):\n        try:\n            link = parsed_body.xpath(\"/html/body/pre/a[{index}]\".format(index=index))[0]\n        except IndexError:\n            break\n        text = link.text\n        if \"..\" in text:\n            continue\n        if \".\" in text:\n            file_url = url + text\n            file_path = os.path.join(dir_path, file_url.split(\"/\")[-1])\n            print(\"Downloading\", file_url)\n            r = requests.get(file_url)\n            with open(file_path, \"wb\") as f:\n                f.write(r.content)\n            print(\"Downloaded\", file_url)\n            #sys.exit()\n        else:\n            new_url = url + text\n            new_dir = os.path.join(dir_path, text)\n            download_files(new_url, new_dir)\n\n\ndef batch_download_by_year(YEAR):\n    response = requests.get(url)\n    parsed_body = html.fromstring(response.content)\n    for index in range(1, 65535):\n        try:\n            link = parsed_body.xpath(\"/html/body/pre/a[{index}]\".format(index=index))[0]\n        except IndexError:\n            break\n        text = link.text\n        if str(YEAR) in text:\n            print(\"Downloading\", YEAR)\n            new_url = url + text\n            new_dir = os.path.join(data_dir, str(YEAR), text)\n            download_files(new_url, new_dir)\n\n    year_url = url + str(YEAR) + \"/\"\n    year_dir = os.path.join(data_dir, str(YEAR))\n    download_files(year_url, year_dir)\n\n\ndef _test_parse():\n    response = requests.get(url)\n    parsed_body = html.fromstring(response.content)\n    link = parsed_body.xpath(\"/html/body/pre/a[999]\")[0]\n    #text = link.text\n    #print(text)\n\nif __name__ == \"__main__\":\n    batch_download_by_year(2023)\n```\n:::\n\n\nI managed to grab a huge bunch of data from the Smogon forum since it is hard to collect similar Pokemon battle data from official websites, except for some crazy poke fans who can manually recognize and record the Pokemon ranking information and player teams from the official competition videos. \n\nI am unfamiliar with some Pokemon names and skills in English, which inevitably lowers my efficiency in parsing the data. At the same time, the good news is the dataset size is overwhelming, which means I don't have to bother particular Pokemons but the whole tendency patterns.\n\nThe collected data can be accessed from this [source](https://www.smogon.com/stats/). My local data collection is managed accordingly to the file hierarchy of this straightforward website.\n\n\nMy current work focuses on the data recorded in 2023. The Pokemon battle data are stored in `.txt` and `.json` formats. I am working on reading some forum threads about the data discussion and explanations. The next plan is to convert the interesting part of the data into an R data frame and end up with visualizations.\n\n\n::: {.cell}\n\n:::\n\n\n# Visualization Ideas\nPlot the pokemon in a network visualization: using sizes to amplify the high ranked pm, and the links for their teammates, checkers and counters. Hopefully highlight the teammates interactively when user picks some pms.\n\nOr I will generate an example by pretending to be a user to create a pokemon team from scratch using the visualization.\n\nThe purpose of these visualization is to act as a pokemon consult. It will tell you the often used pokemon, and their teammates.\n\nAfter you choose the team, using visualization to show the potential foes for each pokemon in the team. And for the most dangerous foe, suggest the best counters.\n\nPlot the skills for select pokemons using stacked graph.\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}