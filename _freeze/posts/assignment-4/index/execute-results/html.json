{
  "hash": "2ccdadd5f11c778408b6d564778f28ad",
  "result": {
    "markdown": "---\ntitle: \"Assignment 4\"\nauthor: \"Jiyin Zhang\"\nsubtitle: \"Marks and Channels\"\ndate: \"2023-02-16\"\ncategories: [Assignment, DataViz]\nimage: shiny_shit.jpg\ncode-fold: true\ncode-tools: true\ndescription: \"A clever description that describes the stuff\"\nformat: html\n---\n\n\n## Import data \n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Code\"}\nlibrary(tidyverse)\n# result <- read.csv(file = 'total_elements_mindat.csv')\n# df_72 <- read.csv(file = 'hardness.csv')\ndf_30 <- read.csv(file = 'hardness_30.csv')\n```\n:::\n\n\n## Funny visualization\n### Expressiveness and Effectiveness\nOur main theme is about the hardness of minerals. To best demonstrate the characteristic of our elements list, I choose to visualize the index of the elements.\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(df_30)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  X elements hmin hmin_mineral hmax hmax_mineral hmean\n1 0        H  0.5    Rectorite    9    Bahianite    NA\n2 1        B  1.0   Barberiite   10  Qingsongite    NA\n3 2        C  1.0    Acetamide   10      Diamond    NA\n4 3        O  0.5    Rectorite    9    Bahianite    NA\n5 4        F  1.0   Barberiite    8        Topaz    NA\n6 5       Na  0.5    Rectorite    8 Diaoyudaoite    NA\n```\n:::\n\n```{.r .cell-code}\n# ggplot(df_30, aes(x=elements, y=X)) +\nggplot(df_30, aes(x=factor(elements, level=elements), y=X)) +\n  geom_point(size=2, shape=as.integer(df_30$X))\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning in grid.Call.graphics(C_points, x$x, x$y, x$pch, x$size): unimplemented\npch value '26'\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning in grid.Call.graphics(C_points, x$x, x$y, x$pch, x$size): unimplemented\npch value '27'\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning in grid.Call.graphics(C_points, x$x, x$y, x$pch, x$size): unimplemented\npch value '28'\n```\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-2-1.png){width=672}\n:::\n:::\n\n\n### Discriminability\nIn terms of discriminability, we believe the larger the axis, the more details can viz to reveal.\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(df_30, aes(x=elements, y=hmin)) +\n  ylim(0, 100) +\n  geom_point(size=2, shape=23)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n:::\n\n### Separability\nWe noticed that the values of 'hmin' are too small to tell, so we amplified it by applying exponential transform.\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(df_30, aes(x=elements, y=exp(hmin))) +\n  geom_point(size=2, shape=23)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n\n```{.r .cell-code}\n  #scale_y_continuous(trans='log2')\n```\n:::\n\n\n### Popout\nNothing can be more striking than the areas of the scatters.\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(df_30, aes(x=elements, y=hmax)) +\n  geom_point(size=df_30$hmax, shape=23, colour = factor(as.integer(df_30$hmax)))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}